define(['jquery', 'popup', 'util'], function ($, popup, util) {
  'use strict'
  return function (widget) {
    return {
      id: widget.id,
      template: [
        '<div>',
        '<div class="cell_cont" v-show="isShow && hasAuthority">',
        '<span class="cell_nodata" v-if="!playUrl"></span>',
        '<span class="cell_text" @click="previewLive" v-else>{{playUrl}}</span>',
        '</div>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget,
          value: [],
          playUrl: '',
          ifreview: 1,//不允许回放
          liveStatus: -1
        }
      },
      watch: {
        value: function () {
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          });
        }
      },
      methods: {
        $reloadValueFun: function (vueObj) {
          this.value = vueObj.value
          return this.verified
        },
        previewLive: function () {
          var _this = this;
          if (_this.liveStatus === 4 && _this.ifreview === 1) {
            popup.alert('不支持回放');
            return;
          }
         window.open(_this.playUrl)
        }
      },
      computed: {
        title: function () {
          return this.widget.config.fields[0].label;
        },
        required: function () {
          return this.widget.config.fields[0].verify.required;
        },
        verified: function () {
          if (!this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)){
            return true
          }
          if (this.required) {
            return this.value.length !== 0
          }
          return true
        },
        errorTip: function () {
          var status = false
          if (this.$store.state.verifieds[this.widget.id] && this.$store.state.verifieds[this.widget.id].errorTip) {
            status = true
          }
          return status
        },
        fromManage: function () {
          return this.$store.getters.getFromManageStatus
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel;
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherReadOnlyStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel;
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true;
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          var readonlyStatus
          var compt = this.$store.getters.getReadonlyOfComts[this.widget.id]
          if (compt) {
            readonlyStatus = true
          } else {
            readonlyStatus = (!this.editable && !this.fromManage && !this.hasRoleId)
          }
          return this.$store.getters.getReadonlyStatus || readonlyStatus
        },
        visible: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('visible')) {
            this.widget.config.fields[0].visible = true
          }
          return this.widget.config.fields[0].visible
        },
        editable: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('editable')) {
            this.widget.config.fields[0].editable = true
          }
          return this.widget.config.fields[0].editable
        },
        hasAuthority: function () {
          var showStatus = false;
          var gatherMode = this.$store.getters.getGatherModel;
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel;
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus;
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields;
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }

          if (!this.visible && !this.fromManage && !this.hasRoleId) {
            return showStatus;
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类似web端的fromManage
        },
        isShow: function () {
          var showStatus = false;
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            showStatus = true;
          } else if (!!this.widget.config.fromDetail && this.$store.state.currOptionSel.inDetailGroupIndex !== this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow;
            }
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id];
          }
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            verified: this.verified,
            isShow: showStatus,
            hasAuthority: this.hasAuthority
          })
          return showStatus;
        }
      },
      created: function () {
        this.value = this.widget.config.fields[0].values || [];
        var liveResult = this.value.length > 0 ? this.value[0] : {};
        this.ifreview = liveResult.hasOwnProperty('ifreview') ? liveResult.ifreview : 1;
        this.liveStatus = liveResult.hasOwnProperty('liveStatus') ? liveResult.liveStatus : -1;
        this.playUrl = liveResult.playUrl || '';
        this.$store.commit('watchValues', {
          id: this.widget.id,
          fvalues: [
            {fidx: 0, values: this.value}
          ],
          verified: this.verified,
          isShow: this.isShow,
          hasAuthority: this.hasAuthority
        });
      }
    };
  }
})