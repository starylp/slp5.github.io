define(['jquery', 'tipImgs', 'multieditor', 'webUploader', 'sortable', 'cropper', 'clipboard', 'imageviewer'], function ($, tipImgs, multieditor, webUploader, sortable, cropper, clipboard, imageviewer) {
  'use strict'
  return function (widget) {
    window['WebUploader'] = webUploader
    window['Sortable'] = sortable
    window['Cropper'] = cropper
    window['clipboard'] = clipboard
    window['Viewer'] = imageviewer;

    return {
      id: widget.id,
      template: [
        '<div :class="{widget_error: errorTip}" v-show="isShow && hasAuthority">',
          '<!--标题-->',
          '<div class="form_widget_title">',
            '<h2 class="widget_name"><em class="option-star" v-if="required"></em>{{title}}</h2>',
          '</div>',
          '<!--标题描述-->',
          '<tip-imgs :tip-text="tipTextData" :tip-img-arr="tipImgsData" ></tip-imgs>',
          '<!--填写区域-->',
          '<div class="form_widget_data">',
            '<!--禁止编辑-->',
            '<div class="form_forbid_edit form_forbid_nodata" v-show="readonly">',
              '<p class="form_forbid_word richtext" :id="\'noEditor\' + widget.id"></p>',
            '</div>',
            '<!--可编辑-->',
            '<div class="form_widget_cont" v-if="!readonly">',
              '<div class="multieditor" :id="\'editor\' + widget.id"></div>',
            '</div>',
          '</div>',
          '<!--提示文本-->',
          '<div class="form_widget_prompt">',
            '<div class="widget_error_tip" v-show="errorTip">',
              '<p class="must_word">此项为必填项</p>',
            '</div>',
          '</div>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget,
          value: ''
        }
      },
      methods: {},
      components: {'tip-imgs': tipImgs},
      watch: {
        value: function () {
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: [{val: $.trim(this.value)}]}
            ],
            errMsg: '',
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          })
        }
      },
      computed: {
        title: function () {
          return this.widget.config.fields[0].label
        },
        required: function () {
          return this.widget.config.fields[0].verify.required
        },
        verified: function () {
          var verified = true
          if (this.required && $.trim(this.value) === '') {
            verified = false
          }
          return verified
        },
        errorTip: function () {
          var status = false
          if (this.$store.state.verifieds[this.widget.id] && this.$store.state.verifieds[this.widget.id].errorTip) {
            status = true
          }
          return status
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherReadOnlyStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          var readonlyStatus
          var compt = this.$store.getters.getReadonlyOfComts[this.widget.id]
          if (compt) {
            readonlyStatus = true
          } else {
            readonlyStatus = !this.editable && !this.hasRoleId
          }
          return this.$store.getters.getReadonlyStatus || readonlyStatus
        },
        tipTextData: function () {
          if (!(this.widget.config.fields[0].tip instanceof Object)) {
            return this.widget.config.fields[0].tip
          }
          return this.widget.config.fields[0].tip.text
        },
        tipImgsData: function () {
          if (!(this.widget.config.fields[0].tip instanceof Object)) {
            return []
          }
          return this.widget.config.fields[0].tip.imgs
        },
        visible: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('visible')) {
            this.widget.config.fields[0].visible = true
          }
          return this.widget.config.fields[0].visible
        },
        editable: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('editable')) {
            this.widget.config.fields[0].editable = false
          }
          return this.widget.config.fields[0].editable
        },
        hasAuthority: function () {
          var showStatus = false
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }

          if (!this.visible && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类型web端的fromManage
        },
        isShow: function () {
          var showStatus = false
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            showStatus = true
          } else if (!!this.widget.config.fromDetail
              && this.widget.config.inDetailGroupIndex > -1
              && this.$store.state.currOptionSel.inDetailGroupIndex !== this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow
            }
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id]
          }
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: [{val: $.trim(this.value)}]}
            ],
            errMsg: '',
            verified: this.verified,
            isShow: showStatus,
            hasAuthority: this.hasAuthority
          })
          return showStatus
        }
      },
      created: function () {
        if (this.readonly) {
          MultiEditor.init('detail')
        } else {
          MultiEditor.init('edit')
        }
        var values = this.widget.config.fields[0].values
        this.value = values ? (values[0] && values[0].val) || '' : ''
        if (this.widget.config.fields[0].hasOwnProperty('unchangeable')) {
          this.widget.config.fields[0].editable = !this.widget.config.fields[0].unchangeable
          delete this.widget.config.fields[0].unchangeable
        }
        var rev = this.$store.getters.getRelevance
        if (rev != null && rev.hasOwnProperty(this.widget.config.id) && rev[this.widget.config.id]) {
          this.value = rev[this.widget.config.id]
        }
        this.$store.commit('watchValues', {
          id: this.widget.id,
          fvalues: [
            {fidx: 0, values: [{val: this.value}]}
          ],
          verified: this.verified,
          isShow: this.isShow,
          hasAuthority: this.hasAuthority
        })
      },
      mounted: function () {
        var _this = this
        var values = this.widget.config.fields[0].values
        this.value = values ? (values[0] && values[0].val) || '' : ''
        var domId = this.readonly ? 'noEditor' + _this.widget.id : 'editor' + _this.widget.id
        var approveModel = this.$store.getters.getApproveModel
        var formType = 'form'
        if (approveModel) {
          formType = 'approve'
        }
        this.$nextTick(function () {
          if (this.readonly) {
            MultiEditor.renderRichtext(domId, this.value);
          } else {
            var staUniId = formId + '-' + _this.widget.id + '-' + uuid
            MultiEditor.initEditor({
              'editorid': domId, //编辑器Id,必传
              'staUniId': staUniId,//统计唯一Id,必传
              'staResId1': formId,//统计业务Id1,非必须
              'staResId2': '0',//统计业务Id2,非必须
              'staResType': formType,//业务类型
              'content': this.value,  // 初始化内容
              'editorheight': 200 //初始化高度，可不传，PC默认高度500,
              // 'toolbars': toolbars //工具栏配置，可不传，不传就是显示全部工具栏
            },function () { //编辑器加载完成后调用
              // console.log('编辑器加载完成');
            },function (msg) { //内容变化回调
              // console.log(msg)
            });
          }
        })
        $('#' + domId).bind('DOMSubtreeModified', function () {
          _this.value = MultiEditor.getRichText(domId).rtf_content
        })
      }
    }
  }
})