define(['tipImgs', 'util'], function (tipImgs, util) {
  'use strict';
  return function (widget) {
  
    function getTypeTreeData(widget, _this) {
      var param = {
        treeAppId: widget.config.typeTree.id,
        enc: widget.config.typeTree.enc,
        fid: _this.$store.getters.getFormFid
      }
      $.getJSON('data/apps/typetree/data/list', param).then(function (res) {
        if (res.success) {
          var resList = res.data.list
          var dataList = []
          for (var i = 0; i < resList.length; i++) {
            if (resList[i].pid === 0) {
              var data = {
                title: resList[i].name,
                id: resList[i].id,
                checked: false
              };
              data.children = getChildrens(data, resList)
              dataList.push(data)
            } else {
              break
            }
          }
          loadOptions(_this, dataList)
        }
      })
    }
  
    function getChildrens(root, resList) {
      return resList.filter(function (item) {
        return item.pid === root.id
      }).map(function (mitem) {
            var data = {
              title: mitem.name,
              id: mitem.id,
              checked: false
            };
            data.children = getChildrens(data, resList)
            return data;
          }
      );
    }

    function optionFrameToggle(_this) {
      _this.optionFrame.show = !_this.optionFrame.show;
      _this.search.sw = '';
      _this.search.model = false;
    }

    function getSelIdx(options) {
      var selIdx = -1;
      for (var i = 0; i < options.length; i++) {
        if (options[i].checked) {
          selIdx = i;
          break;
        }
      }
      return selIdx;
    }
  
  
    /**
     * 设置数据优先级，前端事件，优先级大于默认值（自定义默认值、数据联动、公式编辑、常用公式，...）
     */
    function dataLoadInit(_this, dataType) {
      _this.$store.dispatch('dataLoadInit', {
        widget: _this.widget,
        value: _this.value,
        compose: 'col',
        dataType: dataType ? dataType : _this.$store.getters.getComptDataType('blurChange')
      })
    }

    function updateLevelOptions(_this, options, levelIdx) {
      if (options.length === 0) {
        _this.levelOptions.splice(levelIdx);
        _this.value.splice(levelIdx);
        return;
      }
      var selIdx = getSelIdx(options);

      if (selIdx <= -1) {
        var existOptions = _this.levelOptions[levelIdx];
        if (existOptions) {
          _this.levelOptions[levelIdx] = options;
          //删除子级数据
          _this.levelOptions.splice(levelIdx + 1);
        } else {
          _this.levelOptions.push(options);
        }
        var existValue = _this.value[levelIdx];
        if (existValue) {
          _this.value[levelIdx].val = '';
          _this.value.splice(levelIdx + 1);
        } else {
          _this.value.push({val: ''});
        }
      } else {
        var option = options[selIdx];
        var existOpts = _this.levelOptions[levelIdx];
        if (existOpts) {
          _this.levelOptions[levelIdx] = options;
        } else {
          _this.levelOptions.push(options);
        }
        var existVal = _this.value[levelIdx];
        if (existVal) {
          _this.value[levelIdx].val = option.title;
        } else {
          _this.value.push({val: option.title});
        }
        updateLevelOptions(_this, option.children, levelIdx + 1);
      }
    }

    function getLevelOptions(_this, options, currIdx, val) {
      if (currIdx > _this.value.length - 1) {
        return
      }
      _this.levelOptions.push(options)
      for (var i = 0; i < options.length; i++) {
        var option = options[i]
        if (option.title === val) {
          var idx = ++currIdx
          if (idx <= _this.value.length - 1 && option.children.length > 0) {
            getLevelOptions(_this, option.children, idx, _this.value[idx].val)
          }
        }
      }
    }

    function openOption(_this) {
      if (_this.widget.config.hasOwnProperty('optionsLoadFromUrl') && _this.widget.config.optionsLoadFromUrl.isLoadFromUrl) {
        util.selectboxUtil.optionsLoadFromUrl(_this, true).then(function (resp) {
          if (!resp.success || resp.data.length === 0) {
            resp.data = []
          }
          loadOptions(_this, resp.data)
        })
      }
    }

    function loadOptions(_this, multiOptions) {
      if (_this.value.length === 0) {
        _this.levelOptions.push(multiOptions)
        _this.value.push({val: ''})
      } else if (_this.value[0].val === '') {
        _this.levelOptions.push(multiOptions)
        _this.value.splice(1) //后台设置最少为两级，前台要求第一级没有默认值只显示一级，将多余val删除
      } else {
        getLevelOptions(_this, multiOptions, 0, _this.value[0].val)
      }
    }

    return {
      id: widget.id,
      template: [
        '<div :class="{noClick:readonly, widget_error: errorTip}" v-show="isShow && hasAuthority">',
          '<!--标题-->',
          '<div class="form_widget_title">',
            '<h2 class="widget_name"><em class="option-star" v-if="required"></em>{{title}}</h2>',
          '</div>',
          '<!--标题描述-->',
          '<tip-imgs :tip-text="tipTextData" :tip-img-arr="tipImgsData" ></tip-imgs>',
          '<!--填写区域-->',
          '<div class="form_widget_data">',
            '<!--禁止编辑-->',
            '<div class="form_multple_forbid" v-if="readonly">',
              '<div class="form_forbid_edit form_forbid_nodata" v-show="levelOptions.length == 0">',
                '<p class="form_forbid_word">暂无数据</p>',
              '</div>',
              '<div class="form_forbid_edit form_forbid_nodata" v-show="levelOptions.length > 0">',
                '<p class="form_forbid_word">{{valStr()}}</p>',
              '</div>',
            '</div>',
            '<!--可编辑-->',
            '<div class="form_widget_cont" v-if="!readonly">',
              '<div class="form_multpel_widget" v-for="(options, levelIdx) in levelOptions">',
                '<div class="sub_loading" style="display:none;"><span class="loading_icon"></span></div>',
                '<div class="temp_drop_down" :class="{nodata: value[levelIdx].val == \'\'}" @click.stop="toggleOptionShow(levelIdx)">' +
                '<em class="drop_down icon-dropdown" ></em>{{value[levelIdx].val==""?"请选择":value[levelIdx].val}}</div>',
              '</div>',
            '</div>',
          '</div>',
          '<!--提示文本-->',
          '<div class="form_widget_prompt">',
            '<div class="widget_error_tip" v-show="errorTip">',
              '<p class="must_word">此项为必填项</p>',
            '</div>',
            '<div style="display: none;">{{relateFieldValueStatus}}</div>',
          '</div>',

          '<!--遮罩-->',
          '<div class="super_mask" v-show="optionFrame.show" @click.stop="closeOption"></div>',
          '<!--下拉框弹窗-->',
          '<div class="droplist_pop" v-show="optionFrame.show" :id="\'selectBoxOption\'+widget.id">',
            '<div class="drop_pop_top">',
              '<div class="drop_pop_title">',
                '<span class="drop_pop_clear" @click="$clearSelect">清空</span>',
                '<span class="drop_pop_sure" @click.stop="closeOption">确定</span>',
              '</div>',
              '<div class="dp_search">',
                '<div class="dp_search_box">',
                  '<input type="text" placeholder="搜索" class="dp_search_input" readonly>',
                  '<span class="dp_search_icon icon-search"></span>',
                '</div>',
              '</div>',
            '</div>',
            '<div class="drop_search" style="display:none;">',
              '<div class="dp_active_search">',
                '<input type="text" ref="inputVal" class="active_search_input" v-model="search.sw" placeholder="搜索" ' +
                '@focus.stop="startSearch" @blur.stop="cancelSearch" @keyup.stop="doSearch"/>',
                '<span class="active_search_icon icon-search"></span>',
              '</div>',
              '<span class="active_search_cal" @click.stop="clearSearch">取消</span>',
            '</div>',
            '<div class="drop_data" v-show="!search.model">',
              '<ul class="drop_data_list">',
                '<li class="drop_per" v-for="(option, index) in levelOptions[activeLevelIdx]" @click.stop="chooseOption(option)">',
                  '<span class="gradio icon-radio" :class="{\'icon-radiocheck\': option.title == value[activeLevelIdx].val}"></span>',
                  '<div class="drop_per_right">',
                    '<p class="drop_per_word">{{option.title}}</p>',
                  '</div>',
                '</li>',
              '</ul>',
            '</div>',
            '<div :id="\'selectBoxForSearch\'+widget.id" class="drop_data" v-show="search.model">',
              '<!--搜索无结果-->',
              '<p class="drop_nodata" v-show="searchOptions.length == 0">搜索无结果</p>',
              '<ul class="drop_data_list">',
                '<li class="drop_per" v-for="(option, index) in searchOptions" @click.stop="chooseOption(option)">',
                '<span class="gradio icon-radio" :class="{\'icon-radiocheck\': option.title == value[activeLevelIdx].val}"></span>',
                '<div class="drop_per_right">',
                  '<p class="drop_per_word">{{option.title}}</p>',
                '</div>',
                '</li>',
              '</ul>',
            '</div>',
            '<div class="drop_sure_btn" style="display:none;">确定</div>',
          '</div>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget,
          value: [],
          activeLevelIdx: 0,
          levelOptions: [],
          searchOptions: [],
          optionFrame: {
            selAll: false,
            show: false
          },
          search: {
            model: false,
            sw: ''
          }
        };
      },
      components: {'tip-imgs': tipImgs},
      methods: {
        startSearch: function () {
          if (!this.search.model) {
            this.$refs.inputVal.blur()
          }
          this.search.model = true;
          this.searchOptions = [];
          this.doSearch()
        },
        closeOption: function () {
          this.optionFrame.show = false;
          this.search.sw = '';
          this.search.model = false;
        },
        clearSearch: function () {
          this.search.sw = '';
          this.search.model = false;
          var search_dom = $('#selectBoxOption' + widget.id)
          search_dom.find('.drop_pop_top').show()
          search_dom.find('.drop_search').hide()
          search_dom.removeClass('drop_full')
        },
        cancelSearch: function () {
          if ($.trim(this.search.sw) === '') {
            this.search.model = false;
          }
        },
        doSearch: function () {
          this.searchOptions = []
          var options = this.levelOptions[this.activeLevelIdx]
          for (var i = 0; i < options.length; i++) {
            if (options[i].title.indexOf(this.search.sw) > -1) {
              this.searchOptions.push(options[i])
            }
          }
        },
        toggleOptionShow: function (levelIdx) {
          if (this.readonly) {
            return;
          }
          this.activeLevelIdx = levelIdx;
          optionFrameToggle(this)
          this.clearSearch()
        },
        chooseOption: function (option) {
          if (this.readonly) {
            return
          }
          this.$store.commit('setInitStatus', false)
          if (option.title === this.value[this.activeLevelIdx].val) { //取消选中
            this.levelOptions.splice(this.activeLevelIdx + 1)
            this.value[this.activeLevelIdx].val = ''
            this.value.splice(this.activeLevelIdx + 1)
            optionFrameToggle(this)
          } else { //选中
            this.value[this.activeLevelIdx].val = option.title
            //刷新子选项
            if (option.children) {
              updateLevelOptions(this, option.children, this.activeLevelIdx + 1)
              if (option.children.length > 0) {
                if (this.search.model) {
                  this.clearSearch()
                }
                this.activeLevelIdx = this.activeLevelIdx + 1;
              } else {
                optionFrameToggle(this)
              }
            }
          }
          dataLoadInit(this)
        },
        $clearSelect: function () {
          this.levelOptions.splice(this.activeLevelIdx + 1)
          this.value[this.activeLevelIdx].val = ''
          this.value.splice(this.activeLevelIdx + 1)
        },
        valStr: function () {
          var values = this.value
          if (!values) {
            return ''
          }
          var arr = []
          for (var i = 0, valObj; valObj = values[i++];) {
            if (valObj.val) {
              arr.push(valObj.val)
            }
          }
          return arr.join('/')
        }
      },
      watch: {
        value: function () {
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          });
        }
      },
      computed: {
        title: function () {
          return this.widget.config.fields[0].label;
        },
        required: function () {
          return this.widget.config.fields[0].verify.required;
        },
        requiredLastStep: function () {
          return this.widget.config.fields[0].verify.requiredLastStep
        },
        verified: function () {
          if (!this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)){
            return true
          }
          if (this.required) {
            var result = false;
            for (var i = 0; i < this.value.length; i++) {
              if (this.value[i].val !== '') {
                result = true;
                break;
              }
            }
            if (this.requiredLastStep) {
              var valNum = 0
              for (var i = 0; i < this.value.length; i++) {
                if (this.value[i].val !== '') {
                  valNum++;
                }
              }
              if (this.levelOptions.length !== valNum) {
                result = false
              }
            }
            return result;
          }
          return true;
        },
        errorTip: function () {
          var status = false
          if (this.$store.state.verifieds[this.widget.id] && this.$store.state.verifieds[this.widget.id].errorTip) {
            status = true
          }
          return status
        },
        isPreview: function () {
          return this.$store.getters.getPreviewStatus
        },
        isInit: function () {
          return this.$store.getters.getInitStatus
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherReadOnlyStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel;
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true;
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          var readonlyStatus
          var compt = this.$store.getters.getReadonlyOfComts[this.widget.id]
          if (compt) {
            readonlyStatus = true
          } else {
            readonlyStatus = !this.editable && !this.hasRoleId
          }
          return this.$store.getters.getReadonlyStatus || readonlyStatus
        },
        relateFieldValueStatus: function () {
          var resultFields = this.$store.getters.getRelateFieldValue
          var obj = resultFields[this.widget.config.id]
          if (obj && obj.id === this.widget.config.id && obj.hasOwnProperty('fields') && ((obj.hasOwnProperty('inDetailIndex') && obj.inDetailIndex === this.widget.config.inDetailGroupIndex) || !obj.hasOwnProperty('inDetailIndex')) && (!this.isPreview || !this.isInit)) {
            this.value = obj.fields[0].values
            this.levelOptions.splice(0)
            var multiOptions = obj.fields[0].multiOptions
            this.widget.config.fields[0].multiOptions = multiOptions
            loadOptions(this, multiOptions)
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 3, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 6, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          return this.$store.getters.getRelateFieldValueStatus
        },
        tipTextData: function () {
          return this.widget.config.fields[0].tip.text
        },
        tipImgsData: function () {
          return this.widget.config.fields[0].tip.imgs;
        },
        visible: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('visible')) {
            this.widget.config.fields[0].visible = true
          }
          return this.widget.config.fields[0].visible
        },
        editable: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('editable')) {
            this.widget.config.fields[0].editable = true
          }
          return this.widget.config.fields[0].editable
        },
        hasAuthority: function () {
          var showStatus = false
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }

          if (!this.visible && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类型web端的fromManage
        },
        isShow: function () {
          var showStatus = this.$store.state.reloadValSubField
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            if (this.widget.pid > 0 && !this.$store.state.verifieds[this.widget.pid].isShow) {
              //明细内子组件时 如果明细组件是隐藏状态时 当前子组件也要改成隐藏状态
              showStatus = false
            } else {
              showStatus = true
            }
          } else if (!!this.widget.config.fromDetail
              && this.widget.config.inDetailGroupIndex > -1
              && this.$store.state.currOptionSel.inDetailGroupIndex !== this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow;
            }
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id];
          }
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            verified: this.verified,
            isShow: showStatus,
            hasAuthority: this.hasAuthority
          });
          return showStatus;
        }
      },
      mounted: function () {
        //下拉框弹窗交互
        var search_dom = $('#selectBoxOption' + widget.id)
        search_dom.find('.dp_search_input').on('click',function(){
          search_dom.find('.drop_pop_top').hide()
          search_dom.find('.drop_search').show()
          search_dom.addClass('drop_full')
          search_dom.find('.active_search_input').focus()
        })
      },
      created: function () {
        var _this = this
        _this.value = _this.widget.config.fields[0].values || [];
        if (_this.widget.config.hasOwnProperty('typeTree') && _this.widget.config.typeTree.id > 0) {
          getTypeTreeData(widget, _this);
        } else if (!_this.widget.config.hasOwnProperty('optionsLoadFromUrl') || !_this.widget.config.optionsLoadFromUrl.isLoadFromUrl) {
          _this.levelOptions.splice(0)
          var multiOptions = _this.widget.config.fields[0].multiOptions
          loadOptions(_this, multiOptions)
        } else {
          _this.$nextTick(function () {
            openOption(_this)
          })
        }
        _this.$nextTick(function () {
          setTimeout(function () {
            // 默认值触发公式编辑
            dataLoadInit(_this, _this.$store.getters.getComptDataType('init'))
          }, 500)
        })
      }
    };
  }
});