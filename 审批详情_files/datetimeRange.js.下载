define(['util', 'moment', 'iosSelectCmp', 'jquery', 'publicUtils', 'VueUtils'], function (util, moment, IosSelectCmp, $, publicUtils, VueUtils) {
  'use strict';
  return function (widget) {
  
    var dayFormat = 'yyyy-MM-dd', dateTimeFormat = 'yyyy-MM-dd HH:mm:ss'

    function getMomentDate(value, format) {
      if (format === 'HH:mm') {
        if (value && value.indexOf('-') !== -1) {
          //上一次缓存的值存在年月日值
          value = '00:00'
        }
        return moment(value, 'HH:mm')
      }
      if (value && value.indexOf('-') === -1) {
        //上一次缓存的值不存在年月日值
        return moment()
      }
      return moment(value)
    }
    
    /**
     * 设置数据优先级，前端事件，优先级大于默认值（自定义默认值、数据联动、公式编辑、常用公式，...）
     */
    function dataLoadInit(_this, dataType) {
      _this.$store.dispatch('dataLoadInit', {
        widget: _this.widget,
        value: $.trim(_this.value),
        compose: 'col',
        dataType: dataType ? dataType : _this.$store.getters.getComptDataType('blurChange')
      })
    }
    
    return {
      id: widget.id,
      template: [
        '<div v-show="isShow && hasAuthority" :class="{widget_error: errorTip || (errorInfo.show&&errorInfo.verifyMsg)}">',
          '<!--填写区域-->',
          '<div class="form_widget_data">',
            '<!--禁止编辑-->',
            '<div class="time_range_forbid" v-if="readonly">',
              '<!--开始时间-->',
              '<div class="time_forbid_start">',
                '<div class="form_widget_title">',
                '<h2 class="widget_name"><em class="option-star" v-if="required"></em>{{stitle}}</h2>',
                '</div>',
                '<div class="form_forbid_edit" :class="{form_forbid_nodata: !stip}">',
                  '<p class="form_forbid_word">{{stip ? stip :\'暂无数据\'}}</p>',
                '</div>',
              '</div>',
              '<!--结束时间-->',
              '<div class="time_forbid_end mt20">',
                '<div class="form_widget_title">',
                '<h2 class="widget_name"><em class="option-star" v-if="required"></em>{{etitle}}</h2>',
                '</div>',
                '<div class="form_forbid_edit" :class="{form_forbid_nodata: !etip}">',
                '<p class="form_forbid_word">{{etip ? etip :\'暂无数据\'}}</p>',
                '</div>',
              '</div>',
              '<!--时长-->',
              '<div class="time_forbid_length mt20" v-if="calculate">',
                '<div class="form_widget_title">',
                '<h2 class="widget_name"><em class="option-star" v-if="required"></em>{{rtitle}}</h2>',
                '</div>',
                '<div class="form_forbid_edit" :class="{form_forbid_nodata: !rinput}">',
                '<p class="form_forbid_word">{{rinput ? rinput :\'暂无数据\'}}</p>',
                '</div>',
              '</div>',
            '</div>',
            '<!--可编辑-->',
            '<div class="form_widget_cont" v-if="!readonly">',
              '<!--开始时间-->',
              '<div class="widget_time_start">',
                '<div class="form_widget_title">',
                '<h2 class="widget_name"><em class="option-star" v-if="required"></em>{{stitle}}</h2>',
                '</div>',
                '<div class="temp_icon_input" :class="{nodata: svalue == \'\'}" @click.stop="selectTime(0)">',
                  '<i class="input_icon icon-date"></i>{{stip}}',
                '</div>',
              '</div>',
              '<!--结束时间-->',
              '<div class="widget_time_end mt20">',
                '<div class="form_widget_title">',
                '<h2 class="widget_name"><em class="option-star" v-if="required"></em>{{etitle}}</h2>',
                '</div>',
                '<div class="temp_icon_input" :class="{nodata: evalue == \'\'}" @click.stop="selectTime(1)">',
                '<i class="input_icon icon-date"></i>{{etip}}',
                '</div>',
              '</div>',
              '<!--时长-->',
              '<div class="widget_time_length mt20" v-if="calculate">',
                '<div class="form_widget_title">',
                '<h2 class="widget_name"><em class="option-star" v-if="required"></em>{{rtitle}}</h2>',
                '</div>',
                '<div class="temp_icon_input">{{rinput}}</div>',
              '</div>',
            '</div>',
          '</div>',
          '<!--提示文本-->',
          '<div class="form_widget_prompt">',
            '<div class="widget_error_tip" v-show="errorInfo.show&&errorInfo.verifyMsg">',
            '<p class="must_word">{{errorInfo.verifyMsg}}</p>',
            '</div>',
            '<div style="display: none;">{{relateFieldValueStatus}}</div>',
          '</div>',
        '<event-trigger :widget="widget" :compose="\'col\'" @trigger-loading-event="triggerLoadingEvent" @trigger-value-event-type="triggerValueEventByType" @trigger-get-value-event="triggerGetValueEvent"></event-trigger>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget,
          svalue: '',
          evalue: '',
          rinput: '',
          rvalue: '',
          errorInfo: {
            verifyMsg: '',
            show: false
          },
          manualSetValue: false
        };
      },
      components: {
        'eventTrigger': VueUtils.loadComponent('static/js/src/front/forms/apps/web/fore/compts/config/component/eventTrigger.vue'),
      },
      methods: {
        triggerLoadingEvent: function (isLoading) {
          this.loadStatus = isLoading
        },
        triggerValueEventByType: function (data) {
          if (data && data.hasOwnProperty('val') && data.hasOwnProperty('type')) {
            switch (data.type) {
              case '0':
                this.svalue = publicUtils.convertTimestampToFormatStr(data.val, this.format)
                break
              case '1':
                this.evalue = publicUtils.convertTimestampToFormatStr(data.val, this.format)
                break
              default:
                this.svalue = ''
                this.evalue = ''
            }
          }
          this.loadStatus = false
        },
        triggerGetValueEvent: function (callback) {
          callback([{svalue: this.svalue, evalue: this.evalue}])
        },
        $verifyDatetimeRange: function (svalue, evalue) {
          if (!svalue || !evalue || !this.calculate) {
            return;
          }
          var choiceSDate = this.sformat === dayFormat ? getMomentDate(svalue + ' 00:00:00', dateTimeFormat) : getMomentDate(svalue, this.sformat);
          var choiceEDate = this.eformat === dayFormat ? getMomentDate(evalue + ' 23:59:59', dateTimeFormat) : getMomentDate(evalue, this.eformat);
          if (choiceEDate.valueOf() < choiceSDate.valueOf()) {
            //popup.alert("开始时间必须小于结束时间");
            this.rvalue = ''
            this.rinput = ''
            return;
          }
          var rangeObj = this.$calculateTime(choiceSDate, choiceEDate);
          var unit = this.widget.config.fields[2].fieldType.unit;
          var result;
          if (unit === 'day') {
            result = rangeObj.rDay + Math.round(rangeObj.rHour / 24 * 100) / 100 + Math.round(rangeObj.rMinute / 60 / 24 * 100) / 100;
          } else {
            result = rangeObj.rDay * 24 + rangeObj.rHour + rangeObj.rMinute / 60;
          }
          this.rinput = parseFloat(result.toFixed(2));
          this.rvalue = this.rinput;
        },
        $calculateTime: function (startDate, endDate) {
          return util.lengthOfTime(startDate, endDate);
        },
        selectTime: function (type) {
          if (this.readonly) {
            return
          }
          var _this = this;
          this.errorInfo.show = true
          _this.manualSetValue = true
          var date = moment(), formatter = "YYYY-MM-DD";
          if (type === 0) {
            if (this.svalue && this.svalue !== '') {
              date = getMomentDate(this.svalue, this.sformat);
            }
            formatter = this.sformat;
          } else {
            if (this.evalue && this.evalue !== '') {
              date = getMomentDate(this.evalue, this.eformat);
            } else if (this.svalue && this.svalue !== '') {
              date = getMomentDate(this.svalue, this.sformat);
            }
            formatter = this.eformat;
          }
          var lv1 = parseInt(date.format('YYYY')),
              lv2 = parseInt(date.format('MM')),
              lv3 = parseInt(date.format('DD')),
              lv4 = parseInt(date.format('HH')),
              lv5 = parseInt(date.format('mm'));
          var year = lv1
          if (formatter === 'HH:mm') {
            lv1 = lv4
            lv2 = lv5
          }
          var rangeDateTime = publicUtils.setValidDateRangeForMobile(_this)
          if (formatter === 'HH:mm') {
            IosSelectCmp.dateTimeHmRangePicker(rangeDateTime.minDateTime, rangeDateTime.maxDateTime, {
              title: '',
              oneLevelId: lv1,
              twoLevelId: lv2,
              threeLevelId: lv3,
              fourLevelId: lv4,
              fiveLevelId: lv5,
              itemHeight: 35,
              isNowStart: false,
              format: formatter,
              relation: [1, 1, 1, 0],
              callback: function (selectOneObj, selectTwoObj, selectThreeObj, selectFourObj, selectFiveObj) {
                var dateStr
                switch (formatter) {
                  case 'HH:mm':
                    dateStr = selectOneObj.id + ':' + selectTwoObj.id
                    break
                }
                if (type === 0) {
                  _this.svalue = dateStr
                  _this.stip = dateStr
                } else {
                  _this.evalue = dateStr
                  _this.etip = dateStr
                }
              }
            })
          } else {
            IosSelectCmp.dateTimeRangePicker(rangeDateTime.minDateTime, rangeDateTime.maxDateTime, {
              title: '',
              oneLevelId: lv1,
              twoLevelId: lv2,
              threeLevelId: lv3,
              fourLevelId: lv4,
              fiveLevelId: lv5,
              itemHeight: 35,
              format: formatter,
              relation: [1, 1, 1, 0],
              callback: function (selectOneObj, selectTwoObj, selectThreeObj, selectFourObj, selectFiveObj) {
                // var dateStr = selectOneObj.id + '-' + selectTwoObj.id + '-' + selectThreeObj.id;
                // if (selectFourObj && selectFourObj.id && selectFiveObj && selectFiveObj.id) {
                //   dateStr = dateStr + ' ' + selectFourObj.id + ':' + selectFiveObj.id;
                // }
                var dateStr
                switch (formatter) {
                  case 'yyyy-MM-dd' :
                    dateStr = selectOneObj.id + '-' + selectTwoObj.id + '-' + selectThreeObj.id
                    break
                  case 'yyyy-MM-dd HH:mm' :
                    dateStr = selectOneObj.id + '-' + selectTwoObj.id + '-' + selectThreeObj.id + ' ' + selectFourObj.id + ':' + selectFiveObj.id
                    break
                  case 'HH:mm':
                    dateStr = selectOneObj.id + ':' + selectTwoObj.id
                    break
                }
                if (type === 0) {
                  _this.svalue = dateStr
                  _this.stip = dateStr
                } else {
                  _this.evalue = dateStr
                  _this.etip = dateStr
                }
              }
            })
          }
        }
      },
      watch: {
        svalue: function (val) {
          this.$verifyDatetimeRange(val, this.evalue);
          var errMsg = '';
          if (!this.verified) {
            if (this.svalue && this.evalue) {
              var choiceSDate = getMomentDate(this.svalue, this.sformat);
              var choiceEDate = getMomentDate(this.evalue, this.eformat);
              var rangeVerify = this.isInclude ? choiceEDate.valueOf() >= choiceSDate.valueOf() : choiceEDate.valueOf() > choiceSDate.valueOf();
              if (!rangeVerify) {
                if (!this.isInclude && choiceEDate.valueOf() === choiceSDate.valueOf()) {
                  errMsg = '开始时间不能等于结束时间';
                } else {
                  errMsg = this.widget.config.verify.dateRange.errMsg;
                }
              }
            }
            if (this.required && ($.trim(this.svalue) === '' || $.trim(this.evalue) === '')) {
              errMsg = '此项为必填项'
            }
          }
          this.errorInfo.verifyMsg = errMsg;
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: [{val: this.svalue}]},
              {fidx: 1, values: [{val: this.evalue}]},
              {fidx: 2, values: [{val: this.rvalue}]}
            ],
            errMsg: errMsg,
            verified: this.verified,
            isShow: this.isShow,
            configId: this.widget.config.id,
            hasAuthority: this.hasAuthority
          })
          this.$store.commit('calculateScore', {
            id: this.widget.id,
            pid: this.widget.pid,
            configId: this.widget.config.id,
            value: this.rvalue,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            fromDetail: !!this.widget.config.fromDetail
          })
          this.$store.commit('setCalculableStatus')
          dataLoadInit(this)
        },
        evalue: function (val) {
          var errMsg = '';
          if (!this.verified) {
            if (this.svalue && this.evalue) {
              var choiceSDate = getMomentDate(this.svalue, this.sformat);
              var choiceEDate = getMomentDate(this.evalue, this.eformat);
              var rangeVerify = this.isInclude ? choiceEDate.valueOf() >= choiceSDate.valueOf() : choiceEDate.valueOf() > choiceSDate.valueOf();
              if (!rangeVerify) {
                if (!this.isInclude && choiceEDate.valueOf() === choiceSDate.valueOf()) {
                  errMsg = '开始时间不能等于结束时间';
                } else {
                  errMsg = this.widget.config.verify.dateRange.errMsg;
                }
              }
            }
            if (this.required && ($.trim(this.svalue) === '' || $.trim(this.evalue) === '')) {
              errMsg = '此项为必填项'
            }
          }
          this.$verifyDatetimeRange(this.svalue, val);
          this.errorInfo.verifyMsg = errMsg;
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: [{val: this.svalue}]},
              {fidx: 1, values: [{val: this.evalue}]},
              {fidx: 2, values: [{val: this.rvalue}]}
            ],
            errMsg: errMsg,
            verified: this.verified,
            isShow: this.isShow,
            configId: this.widget.config.id,
            hasAuthority: this.hasAuthority
          })
          this.$store.commit('calculateScore', {
            id: this.widget.id,
            pid: this.widget.pid,
            configId: this.widget.config.id,
            value: this.rvalue,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            fromDetail: !!this.widget.config.fromDetail
          })
          this.$store.commit('setCalculableStatus')
          dataLoadInit(this)
        }
      },
      computed: {
        required: function () {
          return this.widget.config.verify.required
        },
        errorTip: function () {
          var status = false
          if (this.$store.state.verifieds[this.widget.id] && this.$store.state.verifieds[this.widget.id].errorTip) {
            this.errorInfo.show = true
            status = true
          }
          return status
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel;
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherReadOnlyStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel;
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true;
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          var readonlyStatus
          var compt = this.$store.getters.getReadonlyOfComts[this.widget.id]
          if (compt) {
            readonlyStatus = true
          } else {
            readonlyStatus = !this.editable && !this.hasRoleId
          }
          return this.$store.getters.getReadonlyStatus || readonlyStatus
        },
        isPreview: function () {
          return this.$store.getters.getPreviewStatus
        },
        isInit: function () {
          return this.$store.getters.getInitStatus
        },
        relateFieldValueStatus: function () {
          var relateStatus = this.$store.getters.getRelateFieldValueStatus
          var resultFields = this.$store.getters.getRelateFieldValue
          var obj = resultFields[this.widget.config.id]
          if (this.isPreview && this.isInit) {
            this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 3, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
            this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 6, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
            return relateStatus
          }
          if (obj && obj.id === this.widget.config.id && obj.hasOwnProperty('fields') && ((obj.hasOwnProperty('inDetailIndex') && obj.inDetailIndex === publicUtils.getCurrentDetailIndex(this)) || !obj.hasOwnProperty('inDetailIndex')) && !this.$store.getters.getReadonlyStatus && !this.manualSetValue) {
            var svalues = obj.fields[0].values, snewValue = svalues ? (svalues[0] && svalues[0].val) || '' : ''
            var evalues = obj.fields[1].values, enewValue = evalues ? (evalues[0] && evalues[0].val) || '' : ''
            var sdateStr = '', edateStr = ''
            if (snewValue && enewValue) {
              var format = util.reSetDateFormat(this.widget.config.fields[0].fieldType.format)
              sdateStr = getMomentDate(snewValue, format).format(format)
              edateStr = getMomentDate(enewValue, format).format(format)
            }
            this.svalue = sdateStr
            this.evalue = edateStr
            if (this.isClearRelatedData) {
              this.svalue = ''
              this.evalue = ''
            }
            this.$verifyDatetimeRange(this.svalue, this.evalue)
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 3, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 6, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          this.manualSetValue = false
          return relateStatus
        },
        isClearRelatedData: function () {
          return this.$store.getters.getIsClearRelatedData
        },
        rangeType: function () {
          if (!this.widget.config.verify.hasOwnProperty('validateRange')) {
            return 0
          }
          return this.widget.config.verify.validateRange.rangeType
        },
        dynamicRangeStartValue: function () {
          if (!this.widget.config.verify.hasOwnProperty('validateRange')) {
            return ''
          }
          return this.widget.config.verify.validateRange.dynamicRangeStartValue
        },
        dynamicRangeEndValue: function () {
          if (!this.widget.config.verify.hasOwnProperty('validateRange')) {
            return ''
          }
          return this.widget.config.verify.validateRange.dynamicRangeEndValue
        },
        dynamicRangeStartType: function () {
          if (!this.widget.config.verify.hasOwnProperty('validateRange')) {
            return 0
          }
          return this.widget.config.verify.validateRange.dynamicRangeStartType
        },
        dynamicRangeEndType: function () {
          if (!this.widget.config.verify.hasOwnProperty('validateRange')) {
            return 0
          }
          return this.widget.config.verify.validateRange.dynamicRangeEndType
        },
        beginDate: function () {
          if (!this.widget.config.verify.hasOwnProperty('validateRange')) {
            return ''
          }
          return this.widget.config.verify.validateRange.beginDate
        },
        endDate: function () {
          if (!this.widget.config.verify.hasOwnProperty('validateRange')) {
            return ''
          }
          return this.widget.config.verify.validateRange.endDate
        },
        format: function () {
          return this.widget.config.fields[0].fieldType.format
        },
        verified: function () {
          if (!this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)){
            return true
          }
          if (this.required && ($.trim(this.svalue) === '' || $.trim(this.evalue) === '')) {
            this.errorInfo.verifyMsg = '此项为必填项'
          }
          if (this.required || ($.trim(this.svalue) !== '' && $.trim(this.evalue) !== '')) {
            var timeRangeVerify = true;
            var choiceSDate = getMomentDate(this.svalue, this.sformat);
            var choiceEDate = getMomentDate(this.evalue, this.eformat);
            if (this.calculate) {
              timeRangeVerify = $.trim(this.rvalue) !== ''
            }
            var rangeVerify = this.isInclude ? choiceEDate.valueOf() >= choiceSDate.valueOf() : choiceEDate.valueOf() > choiceSDate.valueOf();
            return $.trim(this.svalue) !== '' && $.trim(this.evalue) !== '' && timeRangeVerify && rangeVerify
          }
          return true
        },
        stitle: function () {
          return this.widget.config.fields[0].label;
        },
        sformat: function () {
          return this.widget.config.fields[0].fieldType.format
        },
        etitle: function () {
          return this.widget.config.fields[1].label;
        },
        eformat: function () {
          return this.widget.config.fields[1].fieldType.format
        },
        rtitle: function () {
          var extra = '';
          switch (this.widget.config.fields[2].fieldType.unit) {
            case 'day':
              extra = '(天)';
              break;
            case 'hour':
              extra = '(小时)';
          }
          return this.widget.config.fields[2].label + extra;
        },
        calculate: function () {
          return this.widget.config.fields[2].fieldType.calculate;
        },
        isInclude: function () {
          return this.widget.config.verify.dateRange.isInclude;
        },
        stip: {
          get: function () {
            if (this.svalue) {
              return this.svalue;
            }
            if (!(this.widget.config.fields[0].tip instanceof Object)) {
              return this.widget.config.fields[0].tip
            }
            return this.widget.config.fields[0].tip.text
          },
          set: function (val) {
          }
        },
        etip: {
          get: function () {
            if (this.evalue) {
              return this.evalue;
            }
            if (!(this.widget.config.fields[1].tip instanceof Object)) {
              return this.widget.config.fields[1].tip
            }
            return this.widget.config.fields[1].tip.text
          },
          set: function (val) {
          }
        },
        visible: function () {
          if (!this.widget.config.hasOwnProperty('visible')) {
            this.widget.config.visible = true
          }
          return this.widget.config.visible
        },
        editable: function () {
          if (!this.widget.config.hasOwnProperty('editable')) {
            this.widget.config.editable = true
          }
          return this.widget.config.editable
        },
        hasAuthority: function () {
          var showStatus = false;
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }

          if (!this.visible && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类型web端的fromManage
        },
        isShow: function () {
          var showStatus = false;
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            showStatus = true;
          } else if (!!this.widget.config.fromDetail
              && this.widget.config.inDetailGroupIndex > -1
              && this.$store.state.currOptionSel.inDetailGroupIndex !== this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow;
            }
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id];
          }
          var svalue = this.svalue, evalue = this.evalue, rvalue = this.rvalue
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: [{val: svalue}]},
              {fidx: 1, values: [{val: evalue}]},
              {fidx: 2, values: [{val: rvalue}]}
            ],
            errMsg: this.errorInfo.verifyMsg,
            verified: this.verified,
            isShow: showStatus,
            hasAuthority: this.hasAuthority
          })
          return showStatus;
        }
      },
      created: function () {
        var svalues = this.widget.config.fields[0].values;
        this.svalue = svalues ? (svalues[0] && svalues[0].val) || '' : '';
        var evalues = this.widget.config.fields[1].values;
        this.evalue = evalues ? (evalues[0] && evalues[0].val) || '' : '';
        this.$verifyDatetimeRange(this.svalue, this.evalue);
      }
    };
  }
});