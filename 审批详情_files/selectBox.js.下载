define(['tipImgs', 'util',  'VueUtils', 'dropload'], function (tipImgs, util, VueUtils) {
  'use strict'
  return function (widget) {
    
    function doRequest(url, data) {
      return $.ajax({
        url: url,
        type: 'post',
        data: data,
        dataType: 'json'
      })
    }
  
    /**
     * 检验当前值并获取已填选项，对于缓存和默认值，pc端不用处理，移动端需要在页面初始化时调用此方法
     * @param _this
     */
    function doNoRepeatCheckByDefaultFun(_this) {
      var valArr = []
      for (var i = 0; i < _this.value.length; i++) {
        valArr.push(_this.value[i].val)
      }
      // 检验当前值并获取已填选项
      _this.$store.commit('operateNoRepeatFieldValue', {
        id: _this.widget.id,
        compt: _this.widget.config.compt,
        configId: _this.widget.config.id,
        inDetailGroupIndex: _this.widget.config.inDetailGroupIndex,
        noRepeated: _this.widget.config.fields[0].verify.noRepeated,
        value: valArr.join(',')
      })
    }
    
    /**
     * 设置数据优先级，前端事件，优先级大于默认值（自定义默认值、数据联动、公式编辑、常用公式，...）
     */
    function dataLoadInit(_this, dataType) {
      var valArr = []
      for (var i = 0; i < _this.value.length; i++) {
        if (_this.value[i].isOther && _this.otherValue) {
          valArr.push(_this.otherValue)
        } else {
          valArr.push(_this.value[i].val)
        }
      }
      _this.$store.dispatch('dataLoadInit', {
        widget: _this.widget,
        value: valArr.join(','),
        values: _this.value,
        otherValue: _this.otherValue,
        compose: 'col',
        dataType: dataType ? dataType : _this.$store.getters.getComptDataType('blurChange')
      })
    }
    
    /**
     *触发第三方设置Url
     */
    function doInsertUrlField(_this) {
      var insertUrlFields = _this.$store.getters.getInsertFiledIdById(_this.widget.config.id)
      if (insertUrlFields && insertUrlFields.length > 0) {
        var valArr = []
        for (var i = 0; i < _this.value.length; i++) {
          valArr.push(_this.value[i].val)
        }
        //存在当前字段被做为第三方Url条件字段
        _this.$store.commit('operateInsertFiledData', {
          id: _this.widget.id,
          compt: _this.widget.config.compt,
          configId: _this.widget.config.id,
          value: valArr.join(',')
        })
      }
    }

    function acquireBindOption(vm) {
      var droploadOpt = vm.droploader.droploadOpt
      var url = vm.droploader.url
      if (vm.formType === 'approveForm') {
        url = 'data/approve/apps/forms/fore/forms/user/bind/field/data'
        vm.droploader.url = url
      }

      var domObj = $('#selectbox' + vm.widget.id)
      var dropload = domObj.dropload({
        scrollArea: domObj,
        threshold: 190,
        domDown: {
          domClass: 'isbottom',
          domNoData: '已经到底啦~(&gt;_&lt;)~~'
        },
        loadDownFn: function (me) {
          doRequest(url, droploadOpt).then(function (res) {
            setTimeout(function () {
              vm.droploader.searching = false
            }, 500)
  
            var needAppendOther = false  //是否需要追加"其他"选项
            if (vm.widget.config.openOtherOption) {
              if ($.trim(droploadOpt.sw) === '其' || $.trim(droploadOpt.sw) === '他' || $.trim(droploadOpt.sw) === '其他') { //搜索串是"其他"时,需要追加
                needAppendOther = true
              } else {
                //搜索状态 ? 是搜索状态且搜索串不是"其他",不追加 : 不是搜索状态,根据接口返回长度是否大于0决定且只在最后一页追加
                needAppendOther = vm.droploader.searchMode && $.trim(droploadOpt.sw) !== '' ? false : (droploadOpt.cpage === res.data.totalPage || res.data.formsUserDetailList.length < droploadOpt.pageSize)
              }
            }
            if (needAppendOther) {
              var otherOptionIndex = vm.$store.getters.getAppendOtherOptionIndex(vm.widget.config.id), checked
              if (otherOptionIndex >= 0  && vm.options && vm.options[otherOptionIndex] && vm.options[otherOptionIndex].isOther) {
                checked = vm.options[otherOptionIndex].checked
                //下一次追加前需要把上一次追加的"其他"删除,重新追加
                vm.options.splice(otherOptionIndex, 1)
              }
              res.data.formsUserDetailList.push({"formValue": [{"val": "其他", "isOther": true, 'checked': checked}]})
            }
            util.acquireOption(vm, res.data.formsUserDetailList)
            if (res.data.totalPage > 1) {
              droploadOpt.cpage = droploadOpt.cpage + 1
            }
            if (droploadOpt.cpage > res.data.totalPage) {
              // 锁定
              me.lock()
              // 无数据
              me.noData()
            }
            $('.isbottom').hide()

            if (res.data.formsUserDetailList.length < droploadOpt.pageSize) {
              // 锁定
              me.lock()
              // 无数据
              me.noData()
            }
            vm.$nextTick(function () {
              setTimeout(function () {
                vm.$forceUpdate()
              }, 500)
              me.delayResetload()
            })
          })
        }
      })
      return {
        timeStamp: 0,
        searchMode: vm.droploader.searchMode,
        dataLoading: false,
        dropload: dropload,
        url: vm.droploader.url,
        droploadOpt: droploadOpt
      }
    }
    
    function bodyScroll(event) {
      event.preventDefault && event.preventDefault()
      event.returnValue = false
      event.stopPropagation && event.stopPropagation()
      return false
    }
    
    function setScroll(_this, type) {
      if (type === 1) {
        ///禁止页面滚动
        $('#selectBoxOption' + _this.widget.id).on('touchmove', bodyScroll, {passive: false})
        var top = $(window).scrollTop()
        $('body').css({'position': 'fixed', 'width': '100%', height: ''})
      } else {
        $('#selectBoxOption' + _this.widget.id).on('touchmove', bodyScroll, {passive: false})
        var body = $('body')
        body.css({'position': '', width: ''})
      }
    }

    function optionFrameToggle(_this, isInit) {
      if (isInit) {
        return
      }
      if (_this.optionFrame.show) {
        setScroll(_this, 2)
        setTimeout(function () {
          _this.optionFrame.show = !_this.optionFrame.show
          _this.$store.commit('setSignViewShowStatus', _this.optionFrame.show)
          doCancelSearchStatus(_this)
          $('#otherVal' + _this.widget.id).focus()
        }, 300)
      } else {
        setScroll(_this, 1)
        _this.optionFrame.show = !_this.optionFrame.show
        _this.$store.commit('setSignViewShowStatus', _this.optionFrame.show)
      }
    }

    function initValueShowAndOptionSelectStatus(_this) {
      _this.options = _this.widget.config.fields[0].options
      _this.nativeSearchOptionStr = JSON.stringify(_this.options)
      for (var i = 0; i < _this.options.length; i++) {
        _this.options[i].checked = false
      }
      for (var i = 0; i < _this.value.length; i++) {
        if (_this.value[i].isOther) {
          _this.options[_this.options.length - 1].checked = true
          _this.otherValue = _this.value[i].val
          _this.value[i].score = _this.options[_this.options.length - 1].score
        } else {
          for (var j = 0; j < _this.options.length; j++) {
            if (_this.value[i].val === _this.options[j].title && !!_this.value[i].isOther === !!_this.options[j].title.isOther) {
              _this.options[j].checked = true
              _this.value[i].score = _this.options[j].score
              _this.value[i].className = _this.options[j].className
              _this.value[i].color = _this.options[j].color
              break
            }
          }
        }
      }
    }

    function doCancelSearchStatus(_this) {
      _this.droploader.droploadOpt.sw = ''
      _this.droploader.searchMode = false
    }

    function reSetNativeOptions(_this, callback) {
      _this.droploader.searchMode = false
      if ((_this.widget.config.hasOwnProperty('optionBindInfo') && _this.widget.config.optionBindInfo.isBinded)
          || (_this.widget.config.hasOwnProperty('linkInfo') && _this.widget.config.linkInfo.linked)) {
        callback && callback()
      } else {
        _this.options = JSON.parse(_this.nativeSearchOptionStr)
        for (var i = 0; i < _this.options.length; i++) {
          _this.options[i].checked = false
        }

        for (var i = 0; i < _this.options.length; i++) {
          if (_this.value.length > 0 && (_this.options[i].title === _this.value[0].val || (_this.options[i].isOther && _this.value[0].isOther))) {
            _this.options[i].checked = true
            break
          }
        }
      }
    }

    /**
     * 检查并联动时只有一条数据时自动选中
     */
    function checkLinkOptionNum(vm) {
      var droploadOpt
      if (vm.widget.config.hasOwnProperty('optionBindInfo') && vm.widget.config.optionBindInfo.isBinded) {
        vm.formType = vm.widget.config.optionBindInfo.bindFormType
        droploadOpt = {
          cpage: 1,
          sw: '',
          formId: vm.widget.config.optionBindInfo.bindFormId,
          valueFieldId: vm.widget.config.optionBindInfo.bindFieldId,
          valueFieldCompt: vm.widget.config.optionBindInfo.bindFieldCompt,
          detailField: vm.widget.pid > 0,
          optionSortId: vm.optionSortId,
          optionSort: vm.optionSort,
          pageSize: vm.droploader.droploadOpt.pageSize,
          enc: vm.widget.config.optionBindInfo.bindFormIdEnc || ''
        }
      } else if (vm.widget.config.hasOwnProperty('linkInfo') && vm.widget.config.linkInfo.linked) {
        var arr = vm.$store.getters.getLinkResultFieldCondArrByFieldId(vm.widget.config.id)
        vm.formType = vm.widget.config.linkInfo.linkFormType
        droploadOpt = {
          cpage: 1,
          sw: '',
          formId: vm.widget.config.linkInfo.linkFormId,
          valueFieldId: vm.widget.config.linkInfo.linkFormValueFieldId,
          valueFieldCompt: vm.widget.config.linkInfo.linkFormValueFieldCompt,
          detailField: vm.widget.pid > 0,
          optionSortId: vm.optionSortId,
          optionSort: vm.optionSort,
          pageSize: vm.droploader.droploadOpt.pageSize,
          enc: vm.widget.config.linkInfo.linkFormIdEnc || '',
          condFields: JSON.stringify(arr)
        }
      }
      var url = vm.droploader.url
      if (vm.formType === 'approveForm') {
        url = 'data/approve/apps/forms/fore/forms/user/bind/field/data'
        vm.droploader.url = url
      }
      doRequest(url, droploadOpt).then(function (res) {
        if (res.data.totalPage === 1) {
          util.acquireOption(vm, res.data.formsUserDetailList)
          //若关联结果只有一个直接选中
          if (vm.options && vm.options.length === 1) {
            vm.selectVal(0, true, true)
          }
        }
      })
    }

    return {
      id: widget.id,
      template: [
        '<div :class="{noClick:readonly, widget_error: errorTip || errorInfo.show}" v-show="isShow && hasAuthority">',
          '<!--标题-->',
          '<div class="form_widget_title">',
            '<h2 class="widget_name"><em class="option-star" v-if="required"></em>{{title}}</h2>',
          '</div>',
          '<!--标题描述-->',
          '<tip-imgs :tip-text="tipTextData" :tip-img-arr="tipImgsData" ></tip-imgs>',
          '<!--填写区域-->',
          '<div class="form_widget_data">',
            '<!--禁止编辑-->',
            '<div class="form_forbid_edit" :class="{form_forbid_nodata: value.length == 0}" v-if="readonly">',
              '<p class="form_forbid_word" v-show="value.length == 0">暂无数据</p>',
              '<p class="form_forbid_word" v-show="value.length > 0 && !widget.config.optionColor">{{tipInfoFun()}}</p>',
              '<div class="chose_color_data" v-show="value.length > 0 && widget.config.optionColor">',
                '<span class="chose_color_per" :class="valueStyle.className" :style="{\'background\':valueStyle.color}">{{tipInfoFun()}}</span>',
              '</div>',
            '</div>',
            '<!--可编辑-->',
            '<div class="form_widget_cont" v-if="!readonly">',
              '<div class="sub_loading" style="display:none;"><span class="loading_icon"></span></div>',
              '<!--文字选项-->',
              '<div class="temp_drop_down" :class="{nodata: value.length == 0}" v-if="!widget.config.optionColor" @click.stop="selectType($event)">' +
              '<em class="drop_down icon-dropdown"></em>{{tipInfoFun()}}</div>',
              '<!--彩色选项-->',
              '<div class="temp_color_down" :class="{nodata: value.length == 0}" v-if="widget.config.optionColor" @click.stop="selectType($event)" >',
                '<em class="drop_down icon-dropdown"></em>',
                '<span v-show="value.length == 0">请选择</span>',
                '<span class="chose_color_per" :class="valueStyle.className" :style="{\'background\':valueStyle.color}" v-show="value.length">{{tipInfoFun()}}</span>',
              '</div>',
            '</div>',
          '</div>',
          '<!--提示文本-->',
          '<div class="form_widget_prompt">',
            '<div class="widget_error_tip" v-show="errorInfo.show">',
              '<p class="must_word">{{errorInfo.alertMsg ? errorInfo.alertMsg : \'此项为必填项\'}}</p>',
            '</div>',
            '<div style="display: none;">{{relateFieldValueStatus}}{{isClear}}{{buttonFieldValue}}</div>',
          '</div>',

          '<!--遮罩-->',
          '<div class="super_mask" v-show="optionFrame.show" @click.stop="closeOption"></div>',
          '<!--下拉框弹窗-->',
          '<div class="droplist_pop" v-show="optionFrame.show" :id="\'selectBoxOption\'+widget.id" :class="{droplist_color_pop: widget.config.optionColor, drop_full: droploader.searchMode}">',
            '<div class="drop_pop_top" v-show="!droploader.searchMode">',
              '<div class="drop_pop_title">',
                '<span class="drop_pop_clear" @click.stop="$clearSelect">清空</span>',
                '<span class="drop_pop_sure" style="display: none;">确定</span>',
              '</div>',
              '<div class="dp_search">',
                '<div class="dp_search_box">',
                  '<input type="text" placeholder="搜索" class="dp_search_input" readonly @click.stop="goSearchMode" />',
                  '<span class="dp_search_icon icon-search"></span>',
                '</div>',
              '</div>',
            '</div>',
            '<div class="drop_search" v-show="droploader.searchMode">',
              '<div class="dp_active_search">',
                '<input type="text" ref="inputVal" class="active_search_input" v-model="droploader.droploadOpt.sw" placeholder="搜索" @blur.stop="cancelSearch($event)" @keyup.stop="$doSearch($event)"/>',
                '<span class="active_search_icon icon-search"></span>',
              '</div>',
              '<span class="active_search_cal" @click.stop="clearSearch($event)">取消</span>',
            '</div>',
            '<div :id="\'selectbox\'+widget.id" class="drop_data" :style="{height: dynamicHeight,overflow: \'auto\'}">',
              '<ul class="drop_data_list">',
                '<li class="drop_per" v-for="(option, index) in options" :class="{default: noRepeatDataList.indexOf(option.title) !== -1, other_option: option.isOther}" @click.stop="selectVal(index)">',
                  '<span class="gradio icon-radio" :class="{\'icon-radiocheck\': option.checked}" v-if="noRepeatDataList.indexOf(option.title) === -1"></span>',
                  '<div class="drop_per_right">',
                    '<p class="drop_per_word" :class="[optionClassName(option), {\'fl\': option.isOther}]" :style="{\'background\': widget.config.optionColor?option.color:\'\'}">{{option.title+(optionScoreShow?"（"+(option.score?option.score:0)+"分）":"")}}</p>',
                    '<input type="text" class="other_input" :class="{\'other_active\': option.checked}" v-show="option.isOther" v-model="otherValue" @blur="toOtherValue()" type="text" :style="{width:textWidth(otherValue)}" @click.stop="selectVal(index,false,true)" :readonly="readonly"/>',
                  '</div>',
                '</li>',
              '</ul>',
            '</div>',
            '<div class="drop_sure_btn" v-show="otherValue !== \'\'" @click.stop="closeOption">确定</div>',
          '</div>',
        '<event-trigger :widget="widget" :compose="\'col\'" @trigger-loading-event="triggerLoadingEvent" @trigger-value-event="triggerValueEvent" @trigger-get-value-event="triggerGetValueEvent"></event-trigger>',
        '<field-link-trigger :widget="widget" @set-loading-status="triggerLoadingEvent" @set-field-value="linkFieldValueStatus"></field-link-trigger>',
        '<detail-combox-field-link-trigger :widget="widget" @set-loading-status="triggerLoadingEvent" @set-field-value="detailComboxLinkFieldValueStatus"></detail-combox-field-link-trigger>',
        '<field-no-repeat-trigger :widget="widget" @set-repeat-status-objs="triggerNoRepeatEvent" @set-repeat-status="triggerNoRepeatStatusEvent"></field-no-repeat-trigger>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget,
          value: [],
          lastRelateValue: [],
          options: [],
          nativeSearchOptionStr: '{}', //直接本地检索时使用
          initComplete: false,
          optionFrame: {
            selAll: false,
            show: false
          },
          dynamicHeight: '6.94rem',//检索和非检索模式用到此参数 定义dropload绑定的dom动态高度值
          droploader: {
            timeStamp: 0,
            searchMode: false,
            dropload: null,
            dataLoading: false,
            droploadOpt: {
              sw: '',
              cpage: 1,
              formId: '',
              pageSize: 20,
              enc: '',
              totalPage: 1
            },
            url: 'data/apps/forms/fore/forms/user/bind/field/data'
          },
          clickedForRelateFiled: false,
          formType: 'customForm',
          otherValue: '',
          errorInfo: {
            alertMsg: '',
            verifyMsg: '',
            show: false
          },
          valueStyle: {
            className: '',
            color: ''
          },
          optionSortId: -3, // 下拉框、下拉复选框的数据联动、关联其他表单数据默认以按提交时间-正序
          optionSort: 'asc', // 下拉框、下拉复选框的数据联动、关联其他表单数据默认以按提交时间-正序
          noRepeatDataList: [],// 重复校验记录的已选下拉框值
          noRepeatStatus: true// 标识该组件重复状态 true 不重复 false 重复
        }
      },
      components: {
        'tip-imgs': tipImgs,
        'eventTrigger': VueUtils.loadComponent('static/js/src/front/forms/apps/web/fore/compts/config/component/eventTrigger.vue'),
        fieldLinkTrigger: VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldLink/fieldLinkTrigger.vue'),
        'detailComboxFieldLinkTrigger': VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldLink/detailcombox/detailComboxFieldLinkTrigger.vue'),
        fieldNoRepeatTrigger: VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldNoRepeat/fieldNoRepeatTrigger.vue')
      },
      methods: {
        triggerLoadingEvent: function (isLoading) {
          // this.loadStatus = isLoading
        },
        triggerValueEvent: function (val) {
          // this.loadStatus = false
          for (var i = 0; i < this.options.length; i++) {
            var option = this.options[i]
            if(val === option.title){
              option.checked = true
              this.selectVal(i, true, true)
              break
            }
          }
    
          // 在options中未找到相应的数据,直接进行赋值显示
          this.value = [{val:val}]
        },
        triggerGetValueEvent:function (callback) {
          callback(this.value)
        },
        triggerNoRepeatEvent: function (repeatObjs) {
          this.noRepeatDataList = repeatObjs;
        },
        triggerNoRepeatStatusEvent: function (status) {
          this.noRepeatStatus = status;
          // 重新提交store
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            errMsg: this.errorInfo.alertMsg,
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          })
        },
        tipInfoFun: function() {
          var _this = this
          var tipArr = []

          for (var i = 0; i < _this.value.length; i++) {
            var val = _this.value[i].val
            if (_this.value[i].isOther) {
              val = _this.otherValue || '其他'
            }
            if (_this.optionScoreShow) {
              var score = _this.value[i].score
              if (!score) {
                score = 0
              }
              val += '（' + score + '分）'
            }
            tipArr.push(val);
            if (_this.widget.config.optionColor) {
              var className = 'chose_color_per '
              if (_this.value[i].isOther) {
                className += ' other_span'
              } else {
                className += _this.value[i].className
              }
              _this.valueStyle.className = className
              _this.valueStyle.color = _this.value[i].color
            }
          }

          if (tipArr.length > 0) {
            return tipArr.join(',')
          }
    
          return '请选择'
        },
        closeOption: function () {
          this.optionFrame.show = false
          if (this.value[0] && this.value[0].isOther) {
            //收起选项弹窗时,校验是否填写了其他选项
            this.errorInfo.show = $.trim(this.otherValue) === ''
          }
          this.$store.commit('setSignViewShowStatus', this.optionFrame.show)
          setScroll(this, 2)
          doCancelSearchStatus(this)
        },
        toOtherValue : function () {
          for (var i = 0; i < this.options.length; i++) {
            if (this.options[i].checked) {
              var option = this.options[i]
              var value  = {val: this.otherValue, isOther: option.isOther, className: option.className, color: option.color}
              this.value = [value]
              break
            }
          }
          dataLoadInit(this)
          window.scroll(0, 0)
        },
        goSearchMode: function () {
          //进入搜索模式
          this.droploader.searchMode = true
          this.$nextTick(function () {
            $(this.$refs.inputVal).focus()
          })
          this.dynamicHeight = '12.06rem'
          this.$forceUpdate()
        },
        clearSearch: function (e) {
          //取消搜索模式
          var _this = this
          this.dynamicHeight = '6.94rem'
          doCancelSearchStatus(this)
          reSetNativeOptions(this, function () {
            _this.options = []
            _this.$store.commit("setAppendOtherOptionIndex", {id: _this.widget.config.id, index: -1})
            _this.$doSearch(e)
          })
        },
        cancelSearch: function (e) {
          var _this = this
          if ($.trim(this.droploader.droploadOpt.sw) === '') {
            reSetNativeOptions(this, function () {
              _this.$doSearch(e)
            })
          }
        },
        $doSearch: function (e) {
          var _this = this
          if ((_this.widget.config.hasOwnProperty('optionBindInfo') && _this.widget.config.optionBindInfo.isBinded)
              || (_this.widget.config.hasOwnProperty('linkInfo') && _this.widget.config.linkInfo.linked)) {
            _this.droploader.timeStamp = e ? e.timeStamp : 0
            setTimeout(function () {
              if (e && _this.droploader.timeStamp === e.timeStamp) {
                _this.droploader.droploadOpt.cpage = 1
                _this.options = []
                _this.$store.commit("setAppendOtherOptionIndex", {id: _this.widget.config.id, index: -1})
                _this.$nextTick(function () {
                  _this.droploader = acquireBindOption(_this)
                })
              }
            }, 800)
          } else {
            _this.options = []
            var resignOption = JSON.parse(_this.nativeSearchOptionStr)
            for (var i = 0; i < resignOption.length; i++) {
              if (resignOption[i].title.toLowerCase().indexOf(_this.droploader.droploadOpt.sw) !== -1) {
                resignOption[i].checked = _this.value.length > 0 && (resignOption[i].title === _this.value[0].val || (resignOption[i].isOther && _this.value[0].isOther))
                _this.options.push(resignOption[i])
              }
            }
          }
        },
        selectVal: function (index, howeverClick, init) {
          if (this.readonly && !howeverClick) {
            return
          }
          if (this.noRepeatDataList.indexOf(this.options[index].title) !== -1) {
            return
          }
          this.errorInfo.show = false
          var options = this.options
          if (this.droploader.searchMode) {
            for (var i = 0; i < this.options.length; i++) {
              if (this.options[i].checked) {
                this.options[i].checked = false
                break
              }
            }
          }
          
          for (var i = 0; i < options.length; i++) {
            if (options[i].checked && i !== index) {
              options[i].checked = false
            }
          }
          if (!init) {
            options[index].checked = !options[index].checked
          } else {
            options[index].checked = true
          }
          if (this.droploader.searchMode) {
            for (var i = 0; i < this.options.length; i++) {
              if (this.options[i].title === options[index].title && !!this.options[i].isOther === !!options[index].isOther) {
                this.options[i].checked = options[index].checked
                break
              }
            }
          }
          
          var val = []
          for (var i = 0; i < options.length; i++) {
            if (options[i].checked) {
              var value = {val: options[i].isOther ? this.otherValue : options[i].title, isOther: options[i].isOther, className: this.options[i].className, color: this.options[i].color}
              if (this.optionScoreShow) {
                value['score'] = options[i].score
              }
              val.push(value)
            }
          }
          this.value = val
          dataLoadInit(this)
          if (options[index].checked) {
            this.$store.commit('setCurrOptionSel', {
              id: this.widget.id,
              configId: this.widget.config.id,
              inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
              idxArr: [index]
            })
          } else {
            this.$store.commit('setCurrOptionSel', {
              id: this.widget.id,
              configId: this.widget.config.id,
              inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
              idxArr: []
            })
          }
          if (!options[index].isOther) {
            optionFrameToggle(this, init)
          }
          doInsertUrlField(this)
          this.$forceUpdate()
        },
        selectType: function (e) {
          //选择类型
          var _this = this
          if (_this.readonly) {
            return
          }
          optionFrameToggle(this)
          _this.errorInfo.show = false
          _this.$store.commit('setInitStatus', false)
          doNoRepeatCheckByDefaultFun(_this);
          if (_this.widget.config.hasOwnProperty('optionBindInfo') && _this.widget.config.optionBindInfo.isBinded) {
            _this.droploader.droploadOpt.formId = _this.widget.config.optionBindInfo.bindFormId
            _this.droploader.droploadOpt.valueFieldId = _this.widget.config.optionBindInfo.bindFieldId
            _this.droploader.droploadOpt.valueFieldCompt = _this.widget.config.optionBindInfo.bindFieldCompt
            _this.droploader.droploadOpt.detailField = _this.widget.pid > 0
            _this.droploader.droploadOpt.optionSortId = _this.optionSortId
            _this.droploader.droploadOpt.optionSort = _this.optionSort
            _this.droploader.droploadOpt.enc = _this.widget.config.optionBindInfo.bindFormIdEnc || ''
            if (_this.droploader.dropload === null) {
              _this.formType = _this.widget.config.optionBindInfo.bindFormType
              _this.droploader = acquireBindOption(_this)
            } else if (_this.optionFrame.show) {
              _this.options = []
              _this.$store.commit("setAppendOtherOptionIndex", {id: _this.widget.config.id, index: -1})
              _this.droploader.timeStamp = 0
              _this.$doSearch(e)
            }
          } else if (_this.widget.config.hasOwnProperty('linkInfo') && _this.widget.config.linkInfo.linked) {
            _this.$nextTick(function () {
              setTimeout(function () {
                var arr = _this.$store.getters.getLinkResultFieldCondArrByFieldId(_this.widget.config.id)
                if (arr.length <= 0) {
                  _this.options = []
                  _this.$store.commit("setAppendOtherOptionIndex", {id: _this.widget.config.id, index: -1})
                  return
                }
                _this.droploader.droploadOpt.condFields = JSON.stringify(arr)
                _this.droploader.droploadOpt.formId = _this.widget.config.linkInfo.linkFormId
                _this.droploader.droploadOpt.valueFieldId = _this.widget.config.linkInfo.linkFormValueFieldId
                _this.droploader.droploadOpt.valueFieldCompt = _this.widget.config.linkInfo.linkFormValueFieldCompt
                _this.droploader.droploadOpt.detailField = _this.widget.pid > 0
                _this.droploader.droploadOpt.optionSortId = _this.optionSortId
                _this.droploader.droploadOpt.optionSort = _this.optionSort
                _this.droploader.droploadOpt.enc = _this.widget.config.linkInfo.linkFormIdEnc || ''
                if (_this.droploader.dropload === null) {
                  _this.formType = _this.widget.config.linkInfo.linkFormType
                  _this.droploader = acquireBindOption(_this)
                } else if (_this.optionFrame.show) {
                  _this.options = []
                  _this.$store.commit("setAppendOtherOptionIndex", {id: _this.widget.config.id, index: -1})
                  _this.$doSearch(e)
                }
              }, 500)
            })
          } else if (_this.widget.config.hasOwnProperty('optionsLoadFromUrl') && _this.widget.config.optionsLoadFromUrl.isLoadFromUrl) {
            _this.options.splice(0, _this.options.length)
            util.selectboxUtil.optionsLoadFromUrl(_this).then(function (resp) {
              if (!resp.success || resp.data.length === 0) {
                return
              }
              _this.options = []
              for (var i = 0; i < resp.data.length; i++) {
                var d = resp.data[i]
                _this.options.push({title: d.val})
              }
              _this.nativeSearchOptionStr = JSON.stringify(_this.options)
            })
          }
          doCancelSearchStatus(_this)
          reSetNativeOptions(_this)
        },
        optionClassName: function (option) {
          if (this.widget.config.optionColor && option.isOther) {
            return 'other_span'
          }
          if (this.widget.config.optionColor) {
            return option.className
          }
          return ''
        },
        $clearSelect: function () {
          for (var i = 0; i < this.options.length; i++) {
            if (this.options[i].checked) {
              this.options[i].checked = false
              break
            }
          }
          this.value = []
          dataLoadInit(this)
        },
        linkFieldValueStatus: function () {
          var arr = this.$store.getters.getLinkResultFieldCondArrByFieldId(this.widget.config.id), hasNullCondVal
          for (var i = 0; i < arr.length; i++) {
            var ele = arr[i]
            if (!ele.val) {
              hasNullCondVal = true
              break
            }
          }
  
          if (hasNullCondVal && !this.isInit) {
            this.value = []
            this.options = []
            this.$store.commit("setAppendOtherOptionIndex", {id: this.widget.config.id, index: -1})
            this.tipInfoFun()
            this.droploader.droploadOpt.condFields = ''
            dataLoadInit(this)
            this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 1, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
            return
          }
  
          if (arr.length > 0 && !this.$store.getters.getReadonlyStatus) {
            this.droploader.droploadOpt.cpage = 1
            this.options = []
            this.$store.commit("setAppendOtherOptionIndex", {id: this.widget.config.id, index: -1})
            this.droploader.dropload = null
            if ((this.droploader.droploadOpt.condFields && this.droploader.droploadOpt.condFields !== JSON.stringify(arr))) {
              if (!this.isPreview || !this.isInit) {
                this.value = []
              }
            }
            this.droploader.droploadOpt.condFields = JSON.stringify(arr)
          }
          checkLinkOptionNum(this)
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 1, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
        },
        getOptionSort: function () { // 获取关联其他表单、数据联动的数据设置的排序规则
          var config = this.widget.config
          if (config.hasOwnProperty('optionSort')) {
            this.optionSortId = config.optionSort.id
            this.optionSort = config.optionSort.sort
          }
        },
        detailComboxLinkFieldValueStatus: function (result) {
          var _this = this
          if (this.readonly && this.$store.state.defaultType === 2) {
            return
          }
          _this.options = []
          _this.$store.commit("setAppendOtherOptionIndex", {id: _this.widget.config.id, index: -1})
          if (result && (result.length > 1 || (result.length === 1 && result[0].val !== ''))) {
            var optionsDatas = []
            optionsDatas.push({'formValue': result})
            util.acquireOption(_this, optionsDatas)
            //若关联结果只有一个直接选中
            if (_this.options && _this.options.length === 1) {
              _this.selectVal(0, true, true)
            }
          } else {
            _this.options = _this.widget.config.fields[0].options
            _this.value = []
          }
          _this.nativeSearchOptionStr = JSON.stringify(_this.options)
        }
      },
      watch: {
        value: function () {
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            errMsg: this.errorInfo.alertMsg,
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          })
          
          var score = '', reisgnOptions = this.widget.config.fields[0].options
          for (var i = 0; i < this.options.length; i++) {
            var option = this.options[i]
            if (option.checked) {
              if (reisgnOptions && reisgnOptions[i]) {
                reisgnOptions[i].checked = true
              }
              score = option.score
            } else {
              if (reisgnOptions && reisgnOptions[i]) {
                reisgnOptions[i].checked = false
              }
            }
          }
          this.$store.commit('calculateScore', {
            id: this.widget.id,
            pid: this.widget.pid,
            configId: this.widget.config.id,
            value: score,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            fromDetail: !!this.widget.config.fromDetail
          })
          this.$store.commit('setCalculableStatus')
          doNoRepeatCheckByDefaultFun(this)
        },
        otherValue: function () {
          var val = {val: $.trim(this.otherValue), isOther: true}
          if (this.optionScoreShow) {
            val['score'] = this.otherOptionScore
          }
          this.value = [val]
        }
      },
      computed: {
        title: function () {
          return this.widget.config.fields[0].label
        },
        required: function () {
          return this.widget.config.fields[0].verify.required
        },
        verified: function () {
          if (!this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)){
            return true
          }
          this.errorInfo.alertMsg = ''
          //无论是否必填，选中“其他选项”必须填写内容otherValue不为空
          for (var i = 0; i < this.options.length; i++) {
            if (this.options[i].checked && this.options[i].isOther && $.trim(this.otherValue) === '') {
              this.errorInfo.alertMsg = '其他选项未填写'
              return false
            }
          }
          if (this.required && (this.value.length === 0 || this.value[0].val === '')) {
            this.errorInfo.alertMsg = '';
            return false
          }
          if (this.noRepeated) {
            this.errorInfo.show = !this.noRepeatStatus
            var errMsg = !this.noRepeatStatus ? this.title + '字段有重复项' : ''
            this.errorInfo.alertMsg = errMsg;
            return this.noRepeatStatus;
          }
          return true
        },
        errorTip: function () {
          var status = false
          if (this.$store.state.verifieds[this.widget.id] && this.$store.state.verifieds[this.widget.id].errorTip) {
            this.errorInfo.show = true
            status = true
          }
          return status
        },
        isPreview: function () {
          return this.$store.getters.getPreviewStatus
        },
        isInit: function () {
          return this.$store.getters.getInitStatus
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherReadOnlyStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          if (this.$store.getters.getCurrentType) {
            return this.$store.getters.getReadonlyStatus
          }
          var readonlyStatus
          var compt = this.$store.getters.getReadonlyOfComts[this.widget.id]
          if (compt) {
            readonlyStatus = true
          } else {
            readonlyStatus = !this.editable && !this.hasRoleId
          }
          return this.$store.getters.getReadonlyStatus || readonlyStatus
        },
        relateFieldValueStatus: function () {
          var resultFields = this.$store.getters.getRelateFieldValue
          var obj = resultFields[this.widget.config.id]
          if (obj && obj.id === this.widget.config.id && obj.hasOwnProperty('fields') && ((obj.hasOwnProperty('inDetailIndex') && obj.inDetailIndex === this.widget.config.inDetailGroupIndex) || !obj.hasOwnProperty('inDetailIndex')) && !this.$store.getters.getReadonlyStatus && (!this.isPreview || !this.isInit)) {
            if (this.$store.getters.getIsClearRelatedData) {
              obj.fields[0].values = []
            }
            var result = obj.fields[0].values
            if (result && JSON.stringify(this.lastRelateValue) === JSON.stringify(result) && (JSON.stringify(result) === '[]' || JSON.stringify(result) === '[{}]')) {
              this.value = []
            }
            if (result && JSON.stringify(this.lastRelateValue) !== JSON.stringify(result)) {
              this.value = $.extend(true, [], result)
              this.lastRelateValue = $.extend(true, [], result)
              dataLoadInit(this)
              this.tipInfoFun()
              initValueShowAndOptionSelectStatus(this)
            }
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 3, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 6, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          return this.$store.getters.getRelateFieldValueStatus
        },
        optionScoreShow: function () {
          return this.widget.config.optionScoreShow
        },
        tipTextData: function () {
          if (!(this.widget.config.fields[0].tip instanceof Object)) {
            return this.widget.config.fields[0].tip
          }
          return this.widget.config.fields[0].tip.text
        },
        tipImgsData: function () {
          if (!(this.widget.config.fields[0].tip instanceof Object)) {
            return []
          }
          return this.widget.config.fields[0].tip.imgs
        },
        visible: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('visible')) {
            this.widget.config.fields[0].visible = true
          }
          return this.widget.config.fields[0].visible
        },
        editable: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('editable')) {
            this.widget.config.fields[0].editable = true
          }
          return this.widget.config.fields[0].editable
        },
        hasAuthority: function () {
          var showStatus = false
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }

          if (!this.visible && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类型web端的fromManage
        },
        isShow: function () {
          var showStatus = this.$store.state.reloadValSubField
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            if (this.widget.pid > 0 && !this.$store.state.verifieds[this.widget.pid].isShow) {
              //明细内子组件时 如果明细组件是隐藏状态时 当前子组件也要改成隐藏状态
              showStatus = false
            } else {
              showStatus = true
            }
          } else if (!!this.widget.config.fromDetail
              && this.widget.config.inDetailGroupIndex > -1
              && this.$store.state.currOptionSel.inDetailGroupIndex !== this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow
            }
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id]
          }

          if (showStatus && !this.clickedForRelateFiled && this.initComplete) {
            this.clickedForRelateFiled = true
            for (var i = 0; i < this.options.length; i++) {
              var option = this.options[i]
              if (option.checked) {
                this.selectVal(i, true, true)
                break
              }
            }
          } else if (!showStatus) {
            this.clickedForRelateFiled = false
          }

          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            errMsg: this.errorInfo.alertMsg,
            isShow: showStatus,
            hasAuthority: this.hasAuthority
          })
          return showStatus
        },
        otherOptionScore: function() {
          var _this = this;
          if (_this.optionScoreShow) {
            for(var i = 0; i < _this.options.length; i++) {
              var opt = _this.options[i]
              if (opt.isOther) {
                return opt.score
              }
            }
          }
        },
        isClear: function () {
          var ids = this.$store.state.optionsLoadFieldObj
          var isClearFromUrl = this.$store.state.isClearFromUrl
          for (var i = 0; i < ids.length; i++) {
            if (this.widget.config.id === ids[i]) {
              if (isClearFromUrl) {
                this.value = []
              }
            }
          }
        },
        noRepeated: function() {
          return this.widget.config.fields[0].verify.noRepeated;
        },
        textWidth: function () {//vue方式动态改变输入框长度
          return function (value) {
            var lineLength = 0
            for (var i = 0; i < value.length; i++) {
              if (value.charCodeAt(i) > 127 || value.charCodeAt(i) === 94) {
                lineLength += 0.28
              } else {
                lineLength += 0.16
              }
            }
            return lineLength + 'rem'
          }
        },
        buttonFieldValue: function () {
          var fieldValue = this.$store.getters.getButtonFieldValue(this.widget.config.alias)
          if (fieldValue) {
            this.value = fieldValue.val || []
            for (var i = 0; i < this.options.length; i++) {
              var option = this.options[i]
              if(this.value[0].val === option.title){
                this.selectVal(i, true, true)
                break
              }
            }
            initValueShowAndOptionSelectStatus(this)
          }
          return fieldValue
        }
      },
      mounted: function () {
        var _this = this
        //防止子组件中构造各组件实例未执行，导致默认值数据关联失效问题
        _this.$nextTick(function () {
          setTimeout(function () {
            dataLoadInit(_this, _this.$store.getters.getComptDataType('init'))
            doNoRepeatCheckByDefaultFun(_this)
          }, 500)
        })
      },
      created: function () {
        this.value = this.widget.config.fields[0].values || []
        if (this.widget.config.fields[0].hasOwnProperty('unchangeable')) {
          this.widget.config.fields[0].editable = !this.widget.config.fields[0].unchangeable
          delete this.widget.config.fields[0].unchangeable
        }
        var rev = this.$store.getters.getRelevance
        if (rev != null && rev.hasOwnProperty(this.widget.config.id) && rev[this.widget.config.id]) {
          this.value = [{val:rev[this.widget.config.id]}]
        }
        for (var i = 0; i < this.value.length; i++) {
          //赋lastRelateValue一个默认值, 防止先通过选择数据了赋值一个值, 然后刷新页面, 此时lastRelateValue重新置空会引发的比对不上的问题
          this.lastRelateValue.push({val: this.value[i].val})
        }
        if ((!this.widget.config.hasOwnProperty('optionBindInfo') || !this.widget.config.optionBindInfo.isBinded) &&
            (!this.widget.config.hasOwnProperty('linkInfo') || !this.widget.config.linkInfo.linked) &&
            (!this.widget.config.hasOwnProperty('optionsLoadFromUrl') || !this.widget.config.optionsLoadFromUrl.isLoadFromUrl)) {
          initValueShowAndOptionSelectStatus(this)
          if (this.isShow) {
            var noneCheck = false
            for (var i = 0; i < this.options.length; i++) {
              var option = this.options[i]
              if (option.checked) {
                this.selectVal(i, true, true)
                noneCheck = true
                break
              }
            }
            if (!noneCheck) {
              this.$store.commit('setCurrOptionSel', {
                id: this.widget.id,
                configId: this.widget.config.id,
                inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
                idxArr: []
              })
            }
          }
          this.$forceUpdate()
          this.initComplete = true
        } else {
          for (var i = 0; i < this.value.length; i++) {
            if (this.value[i].isOther) {
              this.otherValue = this.value[i].val
            }
          }
        }
        // 关联其他表单、数据联动获取数据选项排序规则设置
        this.getOptionSort()
      }
    }
  }
})