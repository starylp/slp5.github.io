define(['jquery', 'util'], function ($, util) {
  'use strict'
  return function (widget) {
    
    function openOption(_this) {
      _this.$store.commit('setInitStatus', false)
      if (_this.widget.config.hasOwnProperty('optionsLoadFromUrl') && _this.widget.config.optionsLoadFromUrl.isLoadFromUrl) {
        util.selectboxUtil.optionsLoadFromUrl(_this, true).then(function (resp) {
          if (!resp.success || resp.data.length === 0) {
            return
          }
          loadOptions(_this, resp.data)
        })
      }
    }
    
    function getLevelOptions(_this, options, currIdx, val) {
      if (currIdx > _this.value.length - 1) {
        return
      }
      _this.levelOptions.push(options)
      for (var i = 0; i < options.length; i++) {
        var option = options[i]
        if (option.title === val) {
          var idx = ++currIdx
          if (idx <= _this.value.length - 1 && option.children.length > 0) {
            getLevelOptions(_this, option.children, idx, _this.value[idx].val)
          }
        }
      }
    }
    
    function loadOptions(_this, multiOptions) {
      if (_this.value.length === 0) {
        _this.levelOptions.push(multiOptions)
        _this.value.push({val: ''})
      } else if (_this.value[0].val === '') {
        _this.levelOptions.push(multiOptions)
        _this.value.splice(1) //后台设置最少为两级，前台要求第一级没有默认值只显示一级，将多余val删除
      } else {
        getLevelOptions(_this, multiOptions, 0, _this.value[0].val)
      }
      _this.levelOptionShowArr.splice(0)
      for (var i = 0; i < _this.levelOptions.length; i++) {
        _this.levelOptionShowArr.push({show: false})
      }
    }
    
    function updateLevelOptions(_this, options, levelIdx) {
      if (options.length === 0) {
        _this.levelOptions.splice(levelIdx)
        _this.value.splice(levelIdx)
        return
      }
      var selIdx = getSelIdx(options)
      
      if (selIdx <= -1) {
        var existOptions = _this.levelOptions[levelIdx]
        if (existOptions) {
          _this.levelOptions[levelIdx] = options
          //删除子级数据
          _this.levelOptions.splice(levelIdx + 1)
        } else {
          _this.levelOptions.push(options)
        }
        var existValue = _this.value[levelIdx]
        if (existValue) {
          _this.value[levelIdx].val = ''
          _this.value.splice(levelIdx + 1)
        } else {
          _this.value.push({val: ''})
        }
      } else {
        var option = options[selIdx]
        var existOpts = _this.levelOptions[levelIdx]
        if (existOpts) {
          _this.levelOptions[levelIdx] = options
        } else {
          _this.levelOptions.push(options)
        }
        var existVal = _this.value[levelIdx]
        if (existVal) {
          _this.value[levelIdx].val = option.title
        } else {
          _this.value.push({val: option.title})
        }
        updateLevelOptions(_this, option.children, levelIdx + 1)
      }
    }
  
    function getSelIdx(options) {
      var selIdx = -1
      for (var i = 0; i < options.length; i++) {
        if (options[i].checked) {
          selIdx = i
          break
        }
      }
      return selIdx
    }
  
    function getTypeTreeData(widget, _this) {
      var param = {
        treeAppId: widget.config.typeTree.id,
        enc: widget.config.typeTree.enc,
        fid: _this.$store.getters.getFormFid
      }
      $.getJSON('data/apps/typetree/data/list', param).then(function (res) {
        if (res.success) {
          var resList = res.data.list
          var dataList = []
          for (var i = 0; i < resList.length; i++) {
            if (resList[i].pid === 0) {
              var data = {
                title: resList[i].name,
                id: resList[i].id,
                checked: false
              };
              data.children = getChildrens(data, resList)
              dataList.push(data)
            } else {
              break
            }
          }
          loadOptions(_this, dataList)
        }
      })
    }
  
    function getChildrens(root, resList) {
      return resList.filter(function (item) {
        return item.pid === root.id
      }).map(function (mitem) {
            var data = {
              title: mitem.name,
              id: mitem.id,
              checked: false
            };
            data.children = getChildrens(data, resList)
            return data;
          }
      );
    }
  
    return {
      id: widget.id,
      template: [
        '<div>',
        '<div class="cell_cont" v-show="isShow && hasAuthority">',
          '<span class="cell_text" v-if="valueText">{{valueText}}</span>',
          '<span class="cell_nodata" v-else></span>',
        '</div>',
        '<div style="display: none;">{{relateFieldValueStatus}}</div>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget,
          value: [],
          levelOptionShowArr: [],
          isError: false,
          levelOptions: [],
          typeShow: false
        }
      },
      props: {
        onlySetValue: {
          //在明细内弹出iframe并加载当前组件时 只显示组件值设置区域标识值 横排明细时使用
          type: Boolean,
          default: function () {
            return false
          }
        }
      },
      methods: {
        $reloadValueFun: function (vueObj) {
          this.value = vueObj.value
          return this.verified
        },
        selOptionStatus: function (status) {
          //父级组件调用
          this.typeShow = status
          if (!status) {
            for (var i = 0; i < this.levelOptionShowArr.length; i++) {
              var os = this.levelOptionShowArr[i]
              os.show = false
            }
          }
        },
        toggleLevelOptionShow: function (levelIdx) {
          if (this.readonly) {
            return
          }
          this.typeShow = true
          for (var i = 0; i < this.levelOptionShowArr.length; i++) {
            var os = this.levelOptionShowArr[i]
            if (i === levelIdx) {
              os.show = !os.show
            } else {
              os.show = false
            }
          }
        },
        chooseOption: function (payload) {
          var index = payload.index, levelIdx = payload.levelIdx
          if (this.readonly) {
            return
          }
          this.$store.commit('recordComptId', '')
          this.typeShow = false
          if (index <= -1) {
            this.levelOptions.splice(levelIdx + 1)
            this.value[levelIdx].val = ''
            this.value.splice(levelIdx + 1)
          } else {
            var options = this.levelOptions[levelIdx]
            var option = options[index]
            this.value[levelIdx].val = option.title
            //刷新子选项
            if (option.children) {
              updateLevelOptions(this, option.children, levelIdx + 1)
            }
          }
          this.levelOptionShowArr.splice(0)
          for (var j = 0; j < this.levelOptions.length; j++) {
            this.levelOptionShowArr.push({show: false})
          }
      
          if (this.onlySetValue) {
            //明细组件内子组件横排时用到 触发父级明细组件中iframe(加载当前组件默认值区域dom)弹窗显示或关闭
            var data = {
              values: [this.value],
              defaultSetAreaShow: this.$refs.myOptions.typeShow
            }
            this.$emit('callbackvalue', data)
          }
        },
        isMust: function () {
          var _this = this
          setTimeout(function () {
            var error = true
            for (var i = 0; i < _this.value.length; i++) {
              if (_this.value[i].val !== '') {
                error = false
                break
              }
            }
            _this.isError = error
          }, 400)
        }
      },
      watch: {
        value: function () {
          if (this.onlySetValue) {
            return
          }
  
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          })
        }
      },
      computed: {
        valueText: function () {
          var valTxt = []
          for (var i = 0; i < this.value.length; i++) {
            var val = this.value[i].val
            if (val !== '') {
              valTxt.push(val)
            }
          }
          return valTxt.join(',')
        },
        required: function () {
          return this.widget.config.fields[0].verify.required
        },
        requiredLastStep: function () {
          return this.widget.config.fields[0].verify.requiredLastStep
        },
        verified: function () {
          if (!this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          if (this.required) {
            var result = false
            for (var i = 0; i < this.value.length; i++) {
              if (this.value[i].val !== '') {
                result = true
                break
              }
            }
            if (this.requiredLastStep) {
              var valNum = 0
              for (var i = 0; i < this.value.length; i++) {
                if (this.value[i].val !== '') {
                  valNum++
                }
              }
              if (this.levelOptions.length !== valNum) {
                result = false
              }
            }
            return result
          }
          return true
        },
        errorTip: function () {
          var status = false
          if (this.$store.state.verifieds[this.widget.id] && this.$store.state.verifieds[this.widget.id].errorTip) {
            status = true
          }
          return status
        },
        fromManage: function () {
          return this.$store.getters.getFromManageStatus
        },
        isPreview: function () {
          return this.$store.getters.getPreviewStatus
        },
        isInit: function () {
          return this.$store.getters.getInitStatus
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherReadOnlyStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          var readonlyStatus
          var compt = this.$store.getters.getReadonlyOfComts[this.widget.id]
          if (compt) {
            readonlyStatus = true
          } else {
            readonlyStatus = (!this.editable && !this.fromManage && !this.hasRoleId)
          }
          return this.$store.getters.getReadonlyStatus || readonlyStatus
        },
        relateFieldValueStatus: function () {
          var resultFields = this.$store.getters.getRelateFieldValue
          var obj = resultFields[this.widget.config.id]
          if (obj && obj.id === this.widget.config.id && obj.hasOwnProperty('fields') &&
              ((obj.hasOwnProperty('inDetailIndex') && obj.inDetailIndex === this.widget.config.inDetailGroupIndex) ||
               !obj.hasOwnProperty('inDetailIndex')) && (!this.isPreview || !this.isInit)) {
            this.value = obj.fields[0].values
            this.levelOptions.splice(0)
            var multiOptions = obj.fields[0].multiOptions
            this.widget.config.fields[0].multiOptions = multiOptions
            loadOptions(this, multiOptions)
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 3, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 6, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          return this.$store.getters.getRelateFieldValueStatus
        },
        title: function () {
          return this.widget.config.fields[0].label
        },
        visible: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('visible')) {
            this.widget.config.fields[0].visible = true
          }
          return this.widget.config.fields[0].visible
        },
        editable: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('editable')) {
            this.widget.config.fields[0].editable = true
          }
          return this.widget.config.fields[0].editable
        },
        hasAuthority: function () {
          var showStatus = false
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }
          
          if (!this.visible && !this.fromManage && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类似web端的fromManage
        },
        isShow: function () {
          var showStatus = this.$store.state.reloadValSubField
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            if (this.widget.pid > 0 && !this.$store.state.verifieds[this.widget.pid].isShow) {
              //明细内子组件时 如果明细组件是隐藏状态时 当前子组件也要改成隐藏状态
              showStatus = false
            } else {
              showStatus = true
            }
          } else if (!!this.widget.config.fromDetail && this.$store.state.currOptionSel.inDetailGroupIndex !==
                     this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow
            }
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id]
          }
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            verified: this.verified,
            isShow: showStatus,
            hasAuthority: this.hasAuthority
          })
          return showStatus
        }
      },
      created: function () {
        var _this = this
        _this.value = _this.widget.config.fields[0].values || []
        if (_this.widget.config.hasOwnProperty('typeTree') && _this.widget.config.typeTree.id > 0) {
          getTypeTreeData(widget, _this);
        } else if (!_this.widget.config.hasOwnProperty('optionsLoadFromUrl') || !_this.widget.config.optionsLoadFromUrl.isLoadFromUrl) {
          _this.levelOptions.splice(0)
          var multiOptions = _this.widget.config.fields[0].multiOptions
          loadOptions(_this, multiOptions)
        } else {
          _this.$nextTick(function () {
            openOption(_this)
          })
        }
        
        _this.$store.commit('watchValues', {
          id: _this.widget.id,
          fvalues: [
            {fidx: 0, values: _this.value}
          ],
          verified: _this.verified,
          isShow: _this.isShow,
          hasAuthority: _this.hasAuthority
        })
      }
    }
  }
})