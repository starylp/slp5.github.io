define(['jquery', 'util', 'VueUtils', 'dropload'], function ($, util, VueUtils) {
  'use strict'
  return function (widget) {
  
    /**
     * 设置数据优先级，前端事件，优先级大于默认值（自定义默认值、数据联动、公式编辑、常用公式，...）
     */
    function dataLoadInit(_this, dataType) {
      var valArr = []
      for (var i = 0; i < _this.value.length; i++) {
        valArr.push(_this.value[i].val)
      }
      _this.$store.dispatch('dataLoadInit', {
        widget: _this.widget,
        value: valArr.join(','),
        values: _this.value,
        compose: 'row',
        dataType: dataType ? dataType : _this.$store.getters.getComptDataType('blurChange')
      })
    }

    function getVerifyInfo(_this) {
      _this.errorInfo.show = false
      if (!_this.min && !_this.max) {
        return true
      }
      var checkCount = 0
      for (var i = 0; i < _this.options.length; i++) {
        if (_this.options[i].checked) {
          checkCount++
        }
      }
      if (checkCount === 0) {
        return true
      }
      if (_this.min && _this.max) {
        if (_this.min === _this.max && checkCount !== _this.min) {
          _this.errorInfo.verifyMsg = '限选' + _this.min + '个选项'
          return false
        }
        if (checkCount < _this.min || checkCount > _this.max) {
          _this.errorInfo.verifyMsg = '限选' + _this.min + '~' + _this.max + '个选项'
          return false
        }
        return true
      }
      if (_this.min && checkCount < _this.min) {
        _this.errorInfo.verifyMsg = '最少选' + _this.min + '个选项'
        return false
      }
      if (_this.max && checkCount > _this.max) {
        _this.errorInfo.verifyMsg = '最多选' + _this.max + '个选项'
        return false
      }
      return true
    }

    function setCurrOptionSel(_this, idArr) {
      if (idArr.length > 0) {
        _this.$store.commit('setCurrOptionSel', {
          id: _this.widget.id,
          configId: _this.widget.config.id,
          compt: _this.widget.config.compt,
          inDetailGroupIndex: _this.widget.config.inDetailGroupIndex,
          idxArr: idArr
        })
      } else {
        _this.$store.commit('setCurrOptionSel', {
          id: _this.widget.id,
          configId: _this.widget.config.id,
          compt: _this.widget.config.compt,
          inDetailGroupIndex: _this.widget.config.inDetailGroupIndex,
          idxArr: []
        })
      }
    }

    function initValueShowAndOptionSelectStatus(_this) {
      _this.options = _this.widget.config.fields[0].options
      for (var i = 0; i < _this.options.length; i++) {
        _this.options[i].checked = false
      }

      var idArr = []
      for (var i = 0; i < _this.value.length; i++) {
        var val = _this.value[i]
        if (val.isOther) {
          _this.options[_this.options.length - 1].checked = true
          idArr.push(_this.options.length - 1)
        } else {
          for (var j = 0; j < _this.options.length; j++) {
            var option = _this.options[j]
            if (val.val === option.title) {
              option.checked = true
              val.className = option.className
              val.color = option.color
              idArr.push(j)
              break
            }
          }
        }
      }

      setCurrOptionSel(_this, idArr)
    }
  
    function valShowFun(_this) {
      if ((!_this.widget.config.hasOwnProperty('optionBindInfo') || !_this.widget.config.optionBindInfo.isBinded) &&
          (!_this.widget.config.hasOwnProperty('linkInfo') || !_this.widget.config.linkInfo.linked) &&
          (!_this.widget.config.hasOwnProperty('optionsLoadFromUrl') || !_this.widget.config.optionsLoadFromUrl.isLoadFromUrl)) {
        initValueShowAndOptionSelectStatus(_this)
        if (_this.isShow) {
          for (var i = 0; i < _this.options.length; i++) {
            var option = _this.options[i]
            if (option.checked) {
              _this.initSelectVal(i, true)
            }
          }
        }
      }
    }
    
    return {
      id: widget.id,
      template: [
        '<div>',
        '<div class="cell_cont" v-show="isShow && hasAuthority">',
          /*文字选项*/
          '<span class="cell_text" v-show="!optionColor">{{value|valueShow}}</span>',
          /*彩色选项*/
          '<i v-show="valuesShow.length>0&&optionColor" v-for="valObj in valuesShow" :class="valObj.className" :style="{\'background\': optionColor?valObj.color:\'\'}" >{{valObj.val}}</i>',
          '<span class="cell_nodata" v-show="valuesShow.length<=0"></span>',
        '</div>',
        '<div style="display: none;">{{relateFieldValueStatus}}</div>',
        '<event-trigger :widget="widget" :compose="\'row\'" @trigger-loading-event="triggerLoadingEvent" @trigger-value-event="triggerValueEvent" @trigger-get-value-event="triggerGetValueEvent"></event-trigger>',
        '<field-link-trigger :widget="widget" @set-loading-status="triggerLoadingEvent" @set-field-value="linkFieldValueStatus"></field-link-trigger>',
        '<detail-combox-field-link-trigger :widget="widget" @set-loading-status="" @set-field-value="detailComboxLinkFieldValueStatus"></detail-combox-field-link-trigger>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget,
          value: [],
          valShow: '',
          childrenSearchOver: false,
          errorInfo: {
            alertMsg: '',
            verifyMsg: '',
            show: false
          },
          otherValue: '',
          initComplete: false,
          clickedForRelateFiled: false
        }
      },
      components: {
        'eventTrigger': VueUtils.loadComponent('static/js/src/front/forms/apps/web/fore/compts/config/component/eventTrigger.vue'),
        fieldLinkTrigger: VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldLink/fieldLinkTrigger.vue'),
        'detailComboxFieldLinkTrigger': VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldLink/detailcombox/detailComboxFieldLinkTrigger.vue')
      },
      props: {
        onlySetValue: {
          //在明细内弹出iframe并加载当前组件时 只显示组件值设置区域标识值 横排明细时使用
          type: Boolean,
          default: function () {
            return false
          }
        }
      },
      methods: {
        triggerLoadingEvent: function (isLoading) {
          // this.loadStatus = isLoading
        },
        triggerValueEvent: function (vals) {
          // this.loadStatus = false
          let values = []
          root:for (var i = 0; i < this.options.length; i++) {
            for (let n = 0; n < vals.length; n++) {
              if (this.options[i].title === vals[n]) {
                this.options[i].checked = true
                values.push({val:vals[n]})
                continue root
              }
            }
      
            this.options[i].checked = false
          }
  
          if (values.length === 0) {
            for (let v of vals) {
              values.push({val: v})
            }
          }
          this.value = values
        },
        triggerGetValueEvent:function (callback) {
          callback(this.value)
        },
        $reloadValueFun: function (vueObj) {
          //子表单横排时打开某行子组件后依次给对应子表彰表格显示字段赋值
          this.value = vueObj.value
          this.otherValue = ''
          for (var i = 0; i < this.value.length; i++) {
            if (this.value[i] && this.value[i].isOther) {
              this.otherValue =  this.value[i].val
              break
            }
          }
          if ((!this.widget.config.hasOwnProperty('optionBindInfo') || !this.widget.config.optionBindInfo.isBinded) &&
              (!this.widget.config.hasOwnProperty('linkInfo') || !this.widget.config.linkInfo.linked) &&
              (!this.widget.config.hasOwnProperty('optionsLoadFromUrl') || !this.widget.config.optionsLoadFromUrl.isLoadFromUrl)) {
            initValueShowAndOptionSelectStatus(this)
          }
          return this.verified
        },
        linkFieldValueStatus: function () {
          var _this = this
          var arr = _this.$store.getters.getLinkResultFieldCondArrByFieldId(this.widget.config.id), hasNullCondVal
          for (var i = 0; i < arr.length; i++) {
            var ele = arr[i]
            if (!ele.val) {
              hasNullCondVal = true
              break
            }
          }
          if (hasNullCondVal) {
            _this.value = []
            _this.options = []
            _this.valShow = ''
            this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 1, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
            return
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 1, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
        },
        initSelectVal: function (index, howeverClick) {
          if (this.readonly && !howeverClick) {
            return
          }
          var options = this.options
          if (options[index].checked) {
            this.$store.commit('setRowCurrOptionSel', {
              id: this.widget.id,
              configId: this.widget.config.id,
              inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
              idxArr: [index]
            })
          }
        },
        detailComboxLinkFieldValueStatus: function (result) {
          var _this = this
          if (result && (result.length > 1 || (result.length === 1 && result[0].val !== ''))) {
            _this.options = []
            var optionsDatas = []
            for (var i = 0; i < result.length; i++) {
              var results = []
              results.push(result[i])
              optionsDatas.push({'formValue': results})
            }
            util.acquireOption(_this, optionsDatas)
            _this.nativeSearchOptionStr = JSON.stringify(_this.options)
          } else {
            _this.options = _this.widget.config.fields[0].options
            _this.nativeSearchOptionStr = JSON.stringify(_this.options)
            _this.value = []
            _this.valShow = ''
          }
          dataLoadInit(this)
        }
      },
      watch: {
        value: function () {
          if (this.onlySetValue) {
            return
          }
          if (this.readonly) {
            return
          }
          if (!this.verified) {
            this.errorInfo.alertMsg = '部分字段选项个数不符合要求！'
          }
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          })
          if ((!this.widget.config.hasOwnProperty('optionBindInfo') || !this.widget.config.optionBindInfo.isBinded) &&
              (!this.widget.config.hasOwnProperty('linkInfo') || !this.widget.config.linkInfo.linked) &&
              (!this.widget.config.hasOwnProperty('optionsLoadFromUrl') || !this.widget.config.optionsLoadFromUrl.isLoadFromUrl)) {
            initValueShowAndOptionSelectStatus(this)
          }
        }
      },
      computed: {
        title: function () {
          return this.widget.config.fields[0].label
        },
        required: function () {
          return this.widget.config.fields[0].verify.required
        },
        verified: function () {
          if (!this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          
          //无论是否必填，选中'其他选项'内容必须填写
          for (var i = 0; i < this.options.length; i++) {
            var option = this.options[i]
            if (option.checked && option.isOther && $.trim(this.otherValue) === '') {
              this.errorInfo.verifyMsg = '其他选项未填写'
              return false
            }
          }
          
          var verified = true
          if (!getVerifyInfo(this)) {
            this.errorInfo.show = true
            verified = false
          }
          if (!this.required) {
            return verified
          }
          return this.value.length !== 0 && verified
        },
        valuesShow: function () {
          if (this.value.length <= 0) {
            return []
          }
          var valArr = []
          if (this.optionColor) {
            for (var k = 0; k < this.value.length; k++) {
              var data = {val: this.value[k].val, color: '', className: ''}
              if (this.value[k].isOther) {
                data.className = 'other_span'
                valArr.push(data)
                continue
              }
              var options = this.options
              for (var x = 0; x < options.length; x++) {
                if (options[x].title !== data.val) {
                  continue
                }
                data.color = options[x].color
                data.className = options[x].className
                break
              }
              valArr.push(data)
            }
            return valArr
          }
          return this.value
        },
        optionColor: function () {
          return this.widget.config.optionColor
        },
        options: function () {
          return this.widget.config.fields[0].options
        },
        min: function () {
          var verify = this.widget.config.fields[0].verify
          if (!verify.minValue || !verify.minValue.range) {
            return ''
          }
          return parseInt(verify.minValue.range)
        },
        max: function () {
          var verify = this.widget.config.fields[0].verify
          if (!verify.maxValue || !verify.maxValue.range) {
            return ''
          }
          return parseInt(verify.maxValue.range)
        },
        isPreview: function () {
          return this.$store.getters.getPreviewStatus
        },
        isInit: function () {
          return this.$store.getters.getInitStatus
        },
        visible: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('visible')) {
            this.widget.config.fields[0].visible = true
          }
          return this.widget.config.fields[0].visible
        },
        editable: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('editable')) {
            this.widget.config.fields[0].editable = true
          }
          if (this.onlySetValue) {
            return true
          }
          return this.widget.config.fields[0].editable
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherReadOnlyStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          if (this.$store.getters.getCurrentType) {
            return this.$store.getters.getReadonlyStatus
          }
          var readonlyStatus
          var compt = this.$store.getters.getReadonlyOfComts[this.widget.id]
          if (compt) {
            readonlyStatus = true
          } else {
            readonlyStatus = !this.editable && !this.hasRoleId
          }
          return this.$store.getters.getReadonlyStatus || readonlyStatus
        },
        relateFieldValueStatus: function () {
          var resultFields = this.$store.getters.getRelateFieldValue
          var obj = resultFields[this.widget.config.id]
          if (obj && obj.id === this.widget.config.id && obj.hasOwnProperty('fields') && ((obj.hasOwnProperty('inDetailIndex') && obj.inDetailIndex === this.widget.config.inDetailGroupIndex) || !obj.hasOwnProperty('inDetailIndex')) && (!this.isPreview || !this.isInit)) {
            var result = obj.fields[0].values
            if (result && JSON.stringify(this.lastRelateValue) === JSON.stringify(result) && (JSON.stringify(result) === '[]' || JSON.stringify(result) === '[{}]')) {
              this.value = []
            }
            if (result && JSON.stringify(this.lastRelateValue) !== JSON.stringify(result)) {
              this.value = result
              this.lastRelateValue = result
              for (var i = 0; i < this.options.length; i++) {
                this.options[i].checked = false
              }
              var idArr = []
              for (var i = 0; i < this.options.length; i++) {
                for (var j = 0; j < this.value.length; j++) {
                  if (this.value[j].val === this.options[i].title) {
                    this.options[i].checked = true
                    idArr.push(i)
                    break
                  }
                }
              }
              var valShowArr = []
              for (var i = 0; i < this.value.length; i++) {
                valShowArr.push(this.value[i].val)
              }
              this.valShow = valShowArr.join(',')
            }
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 3, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 6, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          return this.$store.getters.getRelateFieldValueStatus
        },
        hasAuthority: function () {
          var showStatus = false
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }

          if (!this.visible && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类似web端的fromManage
        },
        isShow: function () {
          var showStatus = this.$store.state.reloadValSubField
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            if (this.widget.pid > 0 && !this.$store.state.verifieds[this.widget.pid].isShow) {
              //明细内子组件时 如果明细组件是隐藏状态时 当前子组件也要改成隐藏状态
              showStatus = false
            } else {
              showStatus = true
            }
          } else if (!!this.widget.config.fromDetail
              && this.widget.config.inDetailGroupIndex > -1
              && this.$store.state.currOptionSel.inDetailGroupIndex !== this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow
            }
          } else {
             showStatus = !!this.$store.state.currOptionSel[this.widget.config.id]
          }
          if (showStatus && !this.clickedForRelateFiled && this.initComplete) {
            this.clickedForRelateFiled = true
            for (var i = 0; i < this.options.length; i++) {
              var option = this.options[i]
              if (option.checked) {
                this.initSelectVal(i, true)
              }
            }
          } else if (!showStatus) {
            this.clickedForRelateFiled = false
          }
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            errMsg: this.errorInfo.alertMsg,
            verified: this.verified,
            isShow: showStatus,
            hasAuthority: this.hasAuthority
          })
          return showStatus
        }
      },
      filters: {
        valueShow: function (value) {
          var valArr = []
          for (var i = 0; i < value.length; i++) {
            valArr.push(value[i].val)
          }
          return valArr.join(',')
        }
      },
      mounted: function () {
        var _this = this
        //防止子组件中构造各组件实例未执行，导致默认值数据关联失效问题
        if (this.$store.getters.getReadonlyStatus) {
          return
        }
        _this.$nextTick(function () {
          setTimeout(function () {
            dataLoadInit(_this, _this.$store.getters.getComptDataType('init'))
          }, 500)
        })
      },
      created: function () {
        this.value = this.widget.config.fields[0].values || []
        if (this.widget.config.fields[0].hasOwnProperty('unchangeable')) {
          this.widget.config.fields[0].editable = !this.widget.config.fields[0].unchangeable
          delete this.widget.config.fields[0].unchangeable
        }
        
        var valShowArr = []
        for (var i = 0; i < this.value.length; i++) {
          valShowArr.push(this.value[i].val)
        }
        this.valShow = valShowArr.join(',')
        valShowFun(this)
      }
    }
  }
})