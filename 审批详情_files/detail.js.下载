define(['jquery', 'popup', 'tipImgs', 'VueUtils', 'util', 'detailUtils', 'publicUtils'], function ($, popup, tipImgs, VueUtils, util, detailUtils, publicUtils) {
  'use strict';

  return function (widget, transform, formType, transformForHorizontal) {
  
    /**
     * 添加子表单记录
     * init:移动端横向新增需要打开填写页
     */
    function doAddGroupOfDetail(_this, init) {
      detailUtils.doAddGroupOfDetailMobile(_this, init, formType, transform, transformForHorizontal)
    }
  
    /**
     * 初始化原始子组件记录之组件id对象
     */
    function initSubComptIdObj(_this) {
      var detailWidgets = _this.$store.state.widgets[_this.widget.id].children
      for (var i = 0; i < detailWidgets.length; i++) {
        var groupDetailWidget = detailWidgets[i]
        for (var j = 0; j < groupDetailWidget.length; j++) {
          var subWidget = groupDetailWidget[j]
          if (subWidget) {
            _this.initConfig.resignSubComptObj[subWidget.id] = 1
          }
        }
      }
    }
  
    function recondTriggerNum(_this, rowLength) {
      var detailWidgets = _this.$store.state.widgets[_this.widget.id].children
      for (var i = 0; i < rowLength; i++) {
        if (i < detailWidgets.length) {
          var subGroupCompt = detailWidgets[i]
          _this.triggerLines[subGroupCompt[0].id] = 1
        }
      }
      setReadOnly(_this)
    }
  
    function setReadOnly(_this) {
      if (!_this.editDetailEnable) {
        var detailWidgets = _this.$store.state.widgets[_this.widget.id].children, readonlyOfComts = _this.$store.state.readonlyOfComts
        for (let i = 0; i < detailWidgets.length; i++) {
          var subGroupCompt = detailWidgets[i]
          for (var j = 0; j < subGroupCompt.length; j++) {
            var subCompt = subGroupCompt[j]
            //记录要设置为只读状态的组件id
            readonlyOfComts[subCompt.id] = 1
          }
        }
        //通知子组件中已有记录为不可编辑状态
        _this.$store.commit('addReadonlyCompts', {readonlyOfComts: readonlyOfComts})
      }
    }
  
    /**
     * 子表单操作时（删除、复制）更新对应数据信息
     * @param _this
     * @param inDetailGroupIndex
     * @param type 具体什么操作
     */
    function updateNoRepeatDataFun(_this, inDetailGroupIndex, type) {
      // 提取出子表单组件id
      var configIds = {}, children = $.extend(true, [], _this.widget.config.compts[0]);
      for (var i = 0; i < children.length; i ++) {
        var compt = children[i];
        configIds[compt.id] = compt.compt;
      }
      _this.$store.commit('updateForOperateSub', {compts: configIds, inDetailGroupIndex: inDetailGroupIndex, type: type});
    }
    
    return {
      id: widget.id,
      template: [
        '<div class="form_subform" v-show="isShow && hasAuthority">',
          '<!--子表单-竖版-->',
          '<div class="subform_vertical" :class="{widget_error: errorTip || itemCountVerify.errorMsg}" v-if="!horizontalShow">',
            '<div class="subform_vertical_title">',
              '<label class="subform_name">{{title}}</label>',
              '<div style="display: none">{{readonly}}</div>',
              '<span class="subform_add_icon icon-addsubfowm" @click="addMx" v-if="addDetailEnable&&!readonly"></span>',
              '<span class="subform_toggle_icon" :class="{\'icon-allpackup\':allGroupComptsShow,\'icon-allpackdown\':!allGroupComptsShow}" @click.stop="operateAllGroupToggle"></span>',
            '</div>',
            '<div class="subform_widget_describe">',
              '<tip-imgs :id="widget.id" :tip-text="tipTextData" :tip-img-arr="tipImgsData" ></tip-imgs>',
            '</div>',
            '<div class="subform_vertical_data">',
              '<div class="subform_vertical_list">',
                '<div class="subform_vertical_per" v-for="(compt, index) in computedCompts" :key="compt.id" :class="{\'flicker\': index == detailCopy.flickerIndex && lastChildComptClassShow}">',
                  '<div class="subform_vertical_head" :class="\'subform_target_\' + widget.id + \'_\' + index">',
                    '<span class="subform_vertical_num" v-show="computedCompts.length > 1">{{index + 1}}</span>',
                    '<div class="vertical_btns">',
                      '<span class="vertical_copy" v-if="addDetailEnable&&!readonly" @click="copyFun(index)">复制</span>',
                      '<span class="vertical_del" v-show="computedCompts.length > 1 && isDeleteDetail(index, compt)" @click="removeMx(index,title)" >删除</span>',
                      '<span class="vertical_toggle_btn" @click.stop="operateOneGroupToggle(index)">{{groupComptsShow[index].show?\'收起\':\'展开\'}} <em class="vertical_toggle_icon" :class="{\'icon-verticalup\':groupComptsShow[index].show,\'icon-verticaldown\':!groupComptsShow[index].show}"></em></span>',
                    '</div>',
                  '</div>',
                  '<!--收起-显示内容-->',
                  '<div class="fold_up_cont owt1" v-show="!groupComptsShow[index].show">{{compt|showAbbreviationInfo(widget.children, index)}}</div>',
                  '<!--子表单控件-->',
                  '<div class="subform_widget" v-show="groupComptsShow[index].show">',
                    '<template v-for="(subcompt, subindex) in compt">',
                      '<component class="form_widget" :is="subcompt" :key="subcompt.id"></component>',
                    '</template>',
                  '</div>',
                '</div>',
              '</div>',
              '<!--添加子表单-->',
              '<div class="subform_add">',
                '<div class="temp_button" @click="addMx" v-if="addDetailEnable&&!readonly">',
                  '<span class="button_icon icon-adduser"></span>{{tip}}',
                  '<span v-show="itemCountLimitTip">（限{{itemCountLimitTip}}个）</span>',
                '</div>',
                '<!--提示文本-->',
                '<div class="form_widget_prompt">',
                  '<div class="widget_error_tip" v-show="itemCountVerify.errorMsg">',
                    '<p class="must_word">限定{{itemCountVerify.errorMsg}}个</p>',
                  '</div>',
                  '<div style="display: none;">{{relateFieldValueStatus}}</div>',
                '</div>',
              '</div>',
            '</div>',
          '</div>',

          '<!--子表单-横版-->',
          '<div class="subform_horizontal" v-if="horizontalShow">',
          '<div style="display: none;">{{relateFieldValueStatus}}{{readonly}}</div>',
            '<div class="subform_horizontal_title">',
              '<label class="subform_name">{{title}}</label>',
            '</div>',
            '<div class="subform_widget_describe">',
             '<tip-imgs :id="widget.id" :tip-text="tipTextData" :tip-img-arr="tipImgsData" ></tip-imgs>',
            '</div>',
            '<div class="subform_horizontal_data">',
              '<div class="subform_hor_table" :class="{widget_error: errorTip || itemCountVerify.errorMsg}">',
                '<div class="sh_table">',
                  '<div class="sh_table_data">',
                    '<div class="sh_table_cont">',
                      '<table width="100%" border="0" cellspacing="0" cellpadding="0">',
                        '<thead>',
                          '<tr>',
                            '<th class="fixed_left">序号</th>',
                            '<th v-for="(subcompt, subIndex) in rowsTitle()">',
                              '<span class="cell_cont">{{subcompt.title}}',
                              //'<span class="icon_sort">',
                              //'<em class="icon_sort_up icon-page_up"></em>',
                              //'<em class="icon_sort_down icon-page_down"></em>',
                              //'</span>',
                              '</span>',
                            '</th>',
                          '</tr>',
                        '</thead>',
                        '<tbody>',
                          '<tr v-for="(groupCompts, index) in computedCompts" @click.stop="openDetailCompts(index)">',
                            '<td class="fixed_left"><span class="cell_cont">{{ index + 1 }}</span></td>',
                            '<template v-for="(subcompt, subindex) in groupCompts">',
                             '<td v-show="componentShow(\'subComptsForTable\'+index, subindex)">',
                              '<component :is="subcompt" :key="subcompt.id" :id="subcompt.id" :ref="\'subComptsForTable\'+index"></component>',
                             '</td>',
                            '</template>',
                          '</tr>',
                        '</tbody>',
                      '</table>',
                    '</div>',
                  '</div>',
                '</div>',
                '<!--添加子表单-->',
                '<div class="subform_sh_add mt20">',
                  '<div class="temp_button" @click="addMx" v-if="addDetailEnable&&!readonly">',
                    '<span class="button_icon icon-adduser"></span>{{tip}}',
                    '<span v-show="itemCountLimitTip">（限{{itemCountLimitTip}}个）</span>',
                  '</div>',
                '</div>',
                '<!--提示文本-->',
                '<div class="form_widget_prompt">',
                  '<div class="widget_error_tip" v-show="itemCountVerify.errorMsg">',
                    '<p class="must_word">限定{{itemCountVerify.errorMsg}}个</p>',
                  '</div>',
                '</div>',
              '</div>',

              '<!--子表单填写弹窗-->',
              '<div class="subform_fill_pop" v-show="horizontalSubCompts.show" @touchmove.stop>',
                '<div class="subform_pop_mask" @click.stop="$subGroupAreaToggle">',
                  '<div class="suform_fill_row" @click.stop="">',
                    '<div class="subform_fill_top">',
                      '<span class="fill_top_title">{{title}}</span>',
                      '<span class="fill_top_num">（{{horizontalSubCompts.currSubGroupIndex + 1}}）</span>',
                    '</div>',
                    '<!--控件区域-->',
                    '<div class="subform_fill_cont" @click.stop="" :style="{overflow: signViewShow? \'initial\':\'auto\'}">',
                      '<component class="form_widget" v-for="compt in horizontalSubCompts.computedSubCompts" :is="compt" :key="compt.id" ref="currentSubCompsRef"></component>',
                    '</div>',
                    '<div class="subform_fill_bottom">',
                      '<div class="fill_bottom_left">',
                        '<em class="fill_page_prev"></em>',
                        '<label class="fill_del" v-show="deleteSubGroupItem" @click.stop="removeMxForHorizontal(horizontalSubCompts.currSubGroupIndex, title)"><em class="fill_del_icon icon-del"></em>删除</label>',
                        '<label class="fill_copy" v-show="addDetailEnable&&!readonly" @click.stop="copyFun(horizontalSubCompts.currSubGroupIndex)"><em' +
                        ' class="fill_copy_icon"></em>复制</label>',
                      '</div>',
                      '<div class="fill_bottom_right">',
                        '<span class="fill_submit" @click.stop="doSaveSubComptsOfValue">完成</span>',
                        '<em class="fill_page_next" @click.stop="doSaveSubComptsOfValue"></em>',
                      '</div>',
                    '</div>',
                  '</div>',
                '</div>',
              '</div>',
            '</div>',
          '</div>',
        '<!--弹窗-打印模板-->',
        '<div class="print_pop" v-show="detailCopy.copyShow">',
        '  <div class="print_pop_mask" style="z-index:21;">',
        '    <div class="print_pop_data">',
        '      <ul class="print_temp_list">',
        '        <li class="print_temp_item active" @click="copyInNext">复制到下一行</li>',
        '        <li class="print_temp_item active" @click="copyInLast">复制到最后一行</li>',
        '      </ul>',
        '      <p class="print_pop_btn" @click="detailCopy.copyShow = !detailCopy.copyShow">关闭</p>',
        '    </div>',
        '  </div>',
        '</div>',
        '<event-trigger :widget="widget" @trigger-detail-event="triggerDetailEvent"></event-trigger>',
        '<detail-combox-field-link-trigger :widget="widget" @trigger-detail-event="triggerDetailEventDetailLink"></detail-combox-field-link-trigger>',
        '</div>'
      ].join(''),
      data: function () {
        var computedCompts = [], groupComptsShow = [], _this = this
        var n = 0, len = widget.children.length
        _this.$store.commit('setCurrFormValueFieldVerify', {id: widget.config.id, type: 8, inDetailGroupIndex: widget.config.inDetailGroupIndex})
        var inv = window.setInterval(function () {
          if (n >= len) {
            clearInterval(inv)
            _this.$store.commit('removeCurrFormValueFieldVerify', {id: widget.config.id, type: 8, inDetailGroupIndex: widget.config.inDetailGroupIndex})
            return
          }
          var i = n; n += 1
          if (widget.config.displayStyle && widget.config.displayStyle.pcDisplayStyle === 'row') {
            //横向展示子组件
            for (; i < n && i < len; i++) {
              let computedCompt = transformForHorizontal(widget.children[i], formType, i, true)
              computedCompts.push(computedCompt)
              groupComptsShow.push({show: true})
            }
          } else {
            for (; i < n && i < len; i++) {
              let computedCompt = transform(widget.children[i], i, true, formType)
              computedCompts.push(computedCompt)
              groupComptsShow.push({show: true})
            }
          }
        }, 1)
        for (var i = 0; i < widget.children.length; i++) {
          // // 保存子表单内的定位组件值在store
          util.saveLocationValue(this, widget.children[i])
        }
        return {
          widget: widget,
          computedCompts: computedCompts,
          groupComptsShow: groupComptsShow,//纵排子表单每组展开显示或折叠隐藏控制数组
          allGroupComptsShow: true,//纵排子表单每组展开显示或折叠隐藏控制数组全局控制参数
          resignCompts: [],
          initConfig: {
            resignSubComptObj: {},//原始子组件id对象集 已有记录 可删除或可编辑功能用到此对象
            isInit: true
          },
          horizontalSubCompts: {
            show: false,
            currSubGroupIndex: -1,
            previewWidgets: {
              0: {id: 0, config: null, children: []}
            },
            computedSubCompts: []
          },
          width: 180,
          defaultSetAreaShow: false, //设置字段值区域功能弹窗显示标识值 横排明细时使用
          itemCountVerify: {
            errorMsg: ''
          },
          lastChildComptClassShow: false,
          detailCopy: {
            copyShow: false,
            flickerIndex: -1,
            index: -1 //控制新增/复制子表单记录闪烁定位索引 默认值-1(刚进填写页默认带一个子表单记录,不需要闪烁)
          },
          triggerLines : {}
        }
      },
      methods: {
        triggerDetailEvent: function (rowLength) {
          this.$store.commit('clearRelateFieldValue')
          for (let n = (rowLength - this.computedCompts.length); n > 0; n--) {
            doAddGroupOfDetail(this, true)
          }
          if (rowLength === 0) {
            doAddGroupOfDetail(this, true)
          }
          for (let n = (this.computedCompts.length - rowLength); n > 0; n--) {
            if (this.horizontalShow) {
              detailUtils.doRemoveMxByLink(this, 0)
            } else {
              this.lastChildComptClassShow = false
              detailUtils.doRemoveMxByLink(this, 0)
            }
          }
          recondTriggerNum(this, rowLength)
        },
        triggerDetailEventDetailLink: function (rowLength) {
          this.$store.commit('clearRelateFieldValue')
          if (rowLength === 0) {
            doAddGroupOfDetail(this, true)
          }
          for (let n = (rowLength - this.computedCompts.length); n > 0; n--) {
            doAddGroupOfDetail(this, true)
          }
          for (let n = (this.computedCompts.length - rowLength); n > 0; n--) {
            if (this.horizontalShow) {
              detailUtils.doRemoveMxByLink(this, 0)
            } else {
              this.lastChildComptClassShow = false
              detailUtils.doRemoveMxByLink(this, 0)
            }
          }
          this.triggerLines = {}
          recondTriggerNum(this, rowLength)
        },
        recondTriggerRow: function (rowNum) {
          recondTriggerNum(this, rowNum)
        },
        operateAllGroupToggle: function () {
          //全局修改纵排子表单内各组子表单展开或收起状态
          this.allGroupComptsShow = !this.allGroupComptsShow
          for (var i = 0; i < this.groupComptsShow.length; i++) {
            this.groupComptsShow[i].show = this.allGroupComptsShow
          }
        },
        operateOneGroupToggle: function (index) {
          //修改纵排子表单内指定组子表单展开或收起状态
          this.groupComptsShow[index].show = !this.groupComptsShow[index].show
        },
        addMx: function () {
          if (this.readonly) {
            return
          }
          this.$store.commit('clearRelateFieldValue')
          doAddGroupOfDetail(this)
        },
        removeMx: function (index, title) {
          this.lastChildComptClassShow = false
          detailUtils.doRemoveMxForMobile(this, index, title)
        },
        removeMxForHorizontal: function (index, title) {
          //横排子表单时在弹出的子组件列表弹窗里点删除当前子组件列表行
          detailUtils.doRemoveMxForMobile(this, index, title)
          this.$subGroupAreaToggle()
        },
        $subGroupAreaToggle: function () {
          //横排子表单内点某一行子组件数据时弹出加载这些子组件的弹窗或关掉这个弹窗
          this.horizontalSubCompts.show = !this.horizontalSubCompts.show
        },
        openDetailCompts: function (index) {
          //横排子表单时弹出并加载当前选中的子表单内某行子组件列表
          detailUtils.doOpenDetailComptsForMobile(this, index, transform)
        },
        doSaveSubComptsOfValue: function () {
          detailUtils.doSaveSubComptsOfValueFun(this)
        },
        rowsTitle: function () {
          var rowsTitleInfo = [], arr = this.resignCompts
          for (var i = 0; i < arr.length; i++) {
            var compt = arr[i], comptName = compt.compt, titleInfo = {id: compt.id, title: '', required: false}
            if (!publicUtils.isDetailComptsShow(this, compt)) {
              continue
            }
            switch (comptName) {
              case 'datetimerange': {
                if (compt.visible || this.hasRoleId) {
                  titleInfo.title = compt.fields[0].label + '-' + compt.fields[1].label
                  titleInfo.required = compt.verify.hasOwnProperty('required')
                  rowsTitleInfo.push(titleInfo)
                }
                break
              }
              case 'captiontext': {
                titleInfo.title = '说明文字'
                titleInfo.required = false
                rowsTitleInfo.push(titleInfo)
                break
              }
              case 'relateddata': {
                if (compt.fields[0].visible || this.fromManage) {
                  titleInfo.title = compt.fields[0].label
                  titleInfo.required = true
                  rowsTitleInfo.push(titleInfo)
                }
                break
              }
              default: {
                if (compt.fields[0].visible || this.hasRoleId) {
                  titleInfo.title = compt.fields[0].label
                  titleInfo.required = compt.fields[0].verify.required
                  rowsTitleInfo.push(titleInfo)
                }
              }
            }
          }
          return rowsTitleInfo
        },
        copyFun: function (index) {
          this.detailCopy.index = index
          this.detailCopy.copyShow = !this.detailCopy.copyShow
        },
        copyInLast: function () {
          //复制到最后一行
          var addIndex = this.detailCopy.index, currentDetailOfChildrens = this.$store.state.widgets[this.widget.id].children
          delete this.$store.getters.getRelateFieldValue[this.widget.config.id]
          detailUtils.doCopySubComptsForMobile(this, formType, addIndex, currentDetailOfChildrens.length - 1, transform, transformForHorizontal)
        },
        copyInNext: function () {
          //复制到下一行
          var addIndex = this.detailCopy.index
          // 复制到下一行后更新字段重复值校验数据
          updateNoRepeatDataFun(this, addIndex + 1, 'copy');
          delete this.$store.getters.getRelateFieldValue[this.widget.config.id]
          detailUtils.doCopySubComptsForMobile(this, formType, addIndex, addIndex, transform, transformForHorizontal)
        },
        componentShow: function (comptIndex, subIndex) {
          // 根据编辑页右侧设置组件是否可见动态显示当前组件
          var refsArray = this.$refs[comptIndex]
          if (!refsArray || refsArray.length <= 0) {
            return true
          }
          if (!refsArray[subIndex] || !refsArray[subIndex].widget || !refsArray[subIndex].widget.config.fields[0].hasOwnProperty('visible')) {
            return true
          }
          if (!publicUtils.isDetailComptsShow(this, refsArray[subIndex].widget.config)) {
            return false
          }
          return refsArray[subIndex].widget.config.fields[0].visible || this.hasRoleId
        },
        /**是否可删除已有记录*/
        isDeleteDetail: function (index, groupCompts) {
          //旧数据没有做配置，或 可以删除已有记录
          if (!this.widget.config.deleteDetail || this.widget.config.deleteDetail.open || !this.widget.config.defaultComptsInfo) {
            return true
          }
          // 在删除没有勾选的情况下，不能删除程序创建（数据联动、选择数据等）的数据
          if (!this.deleteDetailEnable && this.triggerLines[groupCompts[0].id] === 1) {
            return false
          }
          return !this.initConfig.resignSubComptObj[groupCompts[0].id]
        }
      },
      components: {
        'tip-imgs': tipImgs,
        'eventTrigger': VueUtils.loadComponent('static/js/src/front/forms/apps/web/fore/compts/config/component/eventTrigger.vue'),
        'detailComboxFieldLinkTrigger': VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldLink/detailcombox/detailComboxFieldLinkTrigger.vue')
      },
      watch: {
        computedCompts: function () {
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [],
            verified: detailUtils.verifyItemCountFun(this),
            errMsg: this.title + '添加个数不符合要求',
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          })
        }
      },
      filters: {
        showAbbreviationInfo: function (vueObjs, subGroupCompts, index) {
          if (!subGroupCompts || subGroupCompts.length <= index) {
            return '-'
          }
          //显示竖排子表单里每组子组件缩略值
          var arr = []
          for (var i = 0; i < subGroupCompts[index].length; i++) {
            var childrenCompt = subGroupCompts[index][i], comptConfig = childrenCompt.config
            if (comptConfig.compt === 'relateddata' || comptConfig.compt === 'imageocr') {
              continue
            }
            var fields = comptConfig.fields
            if (fields) {
              for (var j = 0; j < fields.length; j++) {
                var field = fields[j]
                if (!field.values) {
                  continue
                }
                switch (comptConfig.compt) {
                  case 'editinput':
                  case 'edittextarea':
                  case 'numberinput':
                  case 'dateinput':
                  case 'computeinput':
                  case 'slider':
                  case 'radiobutton':
                  case 'selectbox':
                    if (field.values.length > 0 && field.values[0].val) {
                      arr.push(field.values[0].val)
                    } else {
                      arr.push('-')
                    }
                    break
                  default:
                    arr.push('-')
                    break
                }
                if (arr.length >= 3) {
                  return arr.join('|')
                }
              }
            }
          }
          return arr.join('|')
        }
      },
      computed: {
        signViewShow: function () {
          return this.$store.state.signViewShow
        },
        title: function () {
          return this.widget.config.label
        },
        errorTip: function () {
          var status = false
          if (this.$store.state.verifieds[this.widget.id] && this.$store.state.verifieds[this.widget.id].errorTip) {
            status = true
          }
          return status
        },
        tip: function () {
          if (!this.widget.config.addDetail) {
            if (!(this.widget.config.tip instanceof Object)) {
              return this.widget.config.tip.trim()
            }
            return this.widget.config.tip.text
          }
          return this.widget.config.addDetail.text
        },
        addDetailEnable: function () {
          if (!this.widget.config.addDetail) {
            return true
          }
          return this.widget.config.addDetail.open
        },
        editDetailEnable: function () {
          if (!this.widget.config.editDetail) {
            return true
          }
          return this.widget.config.editDetail.open
        },
        deleteDetailEnable: function () {
          if (!this.widget.config.deleteDetail) {
            return true
          }
          return this.widget.config.deleteDetail.open
        },
        horizontalShow: function () {
          if (this.widget.config.displayStyle && this.widget.config.displayStyle.pcDisplayStyle === 'row') {
            return true
          }
          return false
        },
        min: function () {
          if (!this.widget.config.addDetail) {
            return 0
          }
          return parseInt(this.widget.config.addDetail.minLimit)
        },
        max: function () {
          if (!this.widget.config.addDetail) {
            return 0
          }
          return parseInt(this.widget.config.addDetail.maxLimit)
        },
        itemCountLimitTip: function () {
          if (!this.min && !this.max) {
            return ''
          }
          if (this.min && this.max) {
            if (this.min === this.max) {
              return this.min
            }
            return this.min + '-' + this.max
          }
          if (this.min) {
            return '最少' + this.min
          }
          return '最多' + this.max
        },
        isPreview: function () {
          return this.$store.getters.getPreviewStatus
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel;
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          var editStatus, editDetail = this.widget.config.editDetail, editOpen = editDetail&&editDetail.open, defaultComptsInfo = this.widget.config.defaultComptsInfo
          if (!editDetail || !defaultComptsInfo) {
            editStatus = false
          } else if (editDetail && editOpen) {
            editStatus = false
          }
          // 不可编辑状态，第一条空数据也不可编辑
          var noEdit = !this.addDetailEnable && !this.deleteDetailEnable && !this.editDetailEnable
          if (noEdit || (editDetail && defaultComptsInfo && defaultComptsInfo.rowNum > 0 && !editOpen)) {
            var detailWidgets = this.$store.state.widgets[this.widget.id].children, readonlyOfComts = this.$store.state.readonlyOfComts
            for (var i = 0; i < detailWidgets.length; i++) {
              var subGroupCompt = detailWidgets[i]
              for (var j = 0; j < subGroupCompt.length; j++) {
                var subCompt = subGroupCompt[j]
                //记录要设置为只读状态的组件id
                if (this.initConfig.resignSubComptObj.isInit) {
                  //页面初始化时执行此逻辑
                  readonlyOfComts[subCompt.id] = 1
                } else if (this.initConfig.resignSubComptObj[subCompt.id]) {
                  //增加或复制子组件列表时执行此逻辑
                  readonlyOfComts[subCompt.id] = 1
                }
              }
            }
            //通知子组件中已有记录为不可编辑状态
            this.$store.commit('addReadonlyCompts', {readonlyOfComts: readonlyOfComts})
            if (this.initConfig.resignSubComptObj.isInit) {
              //第一次执行时将初始状态置为非初始化状态
              this.initConfig.resignSubComptObj.isInit = false
            }
          }
          return this.$store.getters.getReadonlyStatus || editStatus
        },
        relateFieldValueStatus: function () {
          var resultFields = this.$store.getters.getRelateFieldValue
          var obj = resultFields[this.widget.config.id]
          if (obj && obj.id === this.widget.config.id && obj.hasOwnProperty('detailNum')) {
            var sourceLen = this.computedCompts.length
            if (sourceLen < obj.detailNum) {
              for (var i = 0; i < (obj.detailNum - sourceLen); i++) {
                //关联数据组件触发当前明细组件增加被关联明细组件同样个数的组数
                doAddGroupOfDetail(this)
              }
            } else if (sourceLen > obj.detailNum) {
              for (var i = 0; i < (sourceLen - obj.detailNum); i++) {
                //关联数据组件触发当前明细组件删除被关联明细组件多余个数的组数
                var index = sourceLen - 1
                this.$store.commit('removeDetailWidgets', {id: this.widget.id, index: index})
                this.computedCompts.splice(index, 1)
                this.groupComptsShow.splice(index, 1)
              }
            }
            this.triggerLines = {}
            recondTriggerNum(this, obj.detailNum)
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 3, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 6, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          return this.$store.getters.getRelateFieldValueStatus
        },
        tipTextData: function () {
          if (!(this.widget.config.tip instanceof Object)) {
            return ''
          }
          return this.widget.config.tip.text
        },
        tipImgsData: function () {
          if (!(this.widget.config.tip instanceof Object)) {
            return []
          }
          return this.widget.config.tip.imgs
        },
        hasAuthority: function () {
          var showStatus = false
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }

          var detailWidgets = this.$store.state.widgets[this.widget.id].children
          var inVisibleNum = 0
          for (var i = 0; i < detailWidgets[0].length; i++) {
            var subCompt = detailWidgets[0][i]
            //检查明细下的组件是否全部被隐藏
            if (approveModel && !$.isEmptyObject(this.$store.state.formAuthority) && this.$store.state.formAuthority[subCompt.config.compt + subCompt.config.id] === 3) {
              inVisibleNum++
              continue
            }
            //子表单日期区间组件单独判断
            if ((subCompt.config.fields[0].hasOwnProperty('visible') && !subCompt.config.fields[0].visible)
                || (subCompt.config.compt === 'datetimerange' && subCompt.config.hasOwnProperty('visible') && !subCompt.config.visible)) {
              inVisibleNum++
            }
          }
          if (inVisibleNum === detailWidgets[0].length && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类型web端的fromManage
        },
        isShow: function () {
          var showStatus = false
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            showStatus = true
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id]
          }
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [],
            verified: detailUtils.verifyItemCountFun(this),
            errMsg: this.title + '添加个数不符合要求',
            isShow: showStatus,
            hasAuthority: this.hasAuthority
          })
          return showStatus
        },
        isEdit: function () {
          return this.$store.getters.getIsEdit
        },
        deleteSubGroupItem: function () {
          var item = this.horizontalSubCompts
          if (item.currSubGroupIndex < 0) {
            return true
          } else {
            return this.isDeleteDetail(item.currSubGroupIndex, item.computedSubCompts)
          }
        }
      },
      created: function () {
        //记录后台生成的原始子表单内子组件id对象列表
        initSubComptIdObj(this)
      },
      mounted: function () {
        if (this.widget.resignConfig) {
          this.resignCompts = JSON.parse(JSON.stringify(this.widget.resignConfig.compts))
        } else {
          this.resignCompts = JSON.parse(JSON.stringify(this.widget.config.compts))
        }
      }
    };
  }

});