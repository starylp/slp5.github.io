define(['jquery', 'VueUtils', 'util', 'cookies'], function ($, VueUtils, util, Cookies) {
  'use strict'
  return function (widget) {

    return {
      id: widget.id,
      template: [
        '<div>',
        '<div class="cell_cont" v-show="isShow && hasAuthority">',
          '<span class="cell_touch" v-if="value">',
            '<template v-for="(linkInfo, index) in value">',
            '<img :src="linkInfo.cover" :title="linkInfo.title + \'(\' + linkInfo.subTitle + \')\'" style="height: 18px;width: 18px;" />',
            '<span class="btn_del" v-if="!readonly" @click.stop="deleteLinkInfo(index)"></span>',
            '</template>',
          '</span>',
          '<span class="cell_nodata" v-else></span>',
        '</div>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget,
          value: [],
          errInfo: {
            isError: false,
            errMsg: ''
          },
          isError: false,
          fromInner: false
        }
      },
      props: ['approveReadonly'],
      methods: {
        $reloadValueFun: function (vueObj) {
          this.value = vueObj.value
          return this.verified
        },
        isMust: function () {
          this.isError = this.value.length === 0
          if (this.isError) {
            this.errInfo.errMsg = '此项为必填项'
          }
        },
        toggleLinkWindowShow: function (isShow) {
          this.fromInner = true
          this.$refs.myOptions.toggleLinkWindowShow(isShow)
        },
        openUrl: function (index) {
          var linkInfo = this.value[index]
          window.open(linkInfo.link)
        },
        deleteLinkInfo: function (index) {
          if (this.readonly) {
            return
          }
          this.value.splice(index, 1)
        },
        reSetValue: function (result) {
          //明细组件内子组件横排时用到 将父级明细组件中获取到的当前组件的拷贝中设置的值赋值给当前组件值
          if (result.values) {
            for (var i = 0; i < result.values.length; i++) {
              this.value = result.values[i]
            }
          }

          if (!result.defaultSetAreaShow) {

          }
          //后台打开默认值弹窗继续往上传递结果
          this.$emit('callbackvalue', result)
        }
      },
      watch: {
        value: function () {
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          })
        }
      },
      computed: {
        title: function () {
          return this.widget.config.fields[0].label
        },
        name: function () {
          return this.widget.config.fields[0].name
        },
        required: function () {
          return this.widget.config.fields[0].verify.required
        },
        verified: function () {
          if (!this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          if (this.required) {
            return this.value.length !== 0
          }
          return true
        },
        errorTip: function () {
          if (!this.$store.state.verifieds[this.widget.id]) {
            return ''
          }
          return this.$store.state.verifieds[this.widget.id].errorTip
        },
        fromManage: function () {
          return this.$store.getters.getFromManageStatus
        },
        isPreview: function () {
          return this.$store.getters.getPreviewStatus
        },
        isInit: function () {
          return this.$store.getters.getInitStatus
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherReadOnlyStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          if (this.$store.getters.getCurrentType) {
            return this.$store.getters.getReadonlyStatus
          }
          var readonlyStatus
          var compt = this.$store.getters.getReadonlyOfComts[this.widget.id]
          if (compt) {
            readonlyStatus = true
          } else {
            readonlyStatus = (!this.editable && !this.fromManage && !this.hasRoleId)
          }
          return this.$store.getters.getReadonlyStatus || readonlyStatus || this.approveReadonly
        },
        visible: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('visible')) {
            this.widget.config.fields[0].visible = true
          }
          return this.widget.config.fields[0].visible
        },
        editable: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('editable')) {
            this.widget.config.fields[0].editable = true
          }
          return this.widget.config.fields[0].editable
        },
        hasAuthority: function () {
          var showStatus = false
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }

          if (!this.visible && !this.fromManage && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类似web端的fromManage
        },
        isShow: function () {
          var showStatus = false
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            showStatus = true
          } else if (!!this.widget.config.fromDetail && this.$store.state.currOptionSel.inDetailGroupIndex !==
                     this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow
            }
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id]
          }
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: this.value}
            ],
            verified: this.verified,
            isShow: showStatus,
            hasAuthority: this.hasAuthority
          })
          return showStatus
        }
      },
      created: function () {
        var _this = this
        this.value = this.widget.config.fields[0].values || []
        if (this.widget.config.fields[0].hasOwnProperty('unchangeable')) {
          this.widget.config.fields[0].editable = !this.widget.config.fields[0].unchangeable
          delete this.widget.config.fields[0].unchangeable
        }

        this.$store.commit('watchValues', {
          id: this.widget.id,
          fvalues: [
            {fidx: 0, values: this.value}
          ],
          verified: this.verified,
          isShow: this.isShow,
          hasAuthority: this.hasAuthority
        })
      }
    }
  }
})