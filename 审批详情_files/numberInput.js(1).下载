define(['jquery', 'util', 'publicUtils', 'VueUtils'], function ($, util, publicUtils, VueUtils) {
  'use strict'
  return function (widget) {
  
    /**
     * 设置数据优先级，前端事件，优先级大于默认值（自定义默认值、数据联动、公式编辑、常用公式，...）
     */
    function dataLoadInit(_this, dataType) {
      _this.$store.dispatch('dataLoadInit', {
        widget: _this.widget,
        value: $.trim(_this.value),
        values: _this.value,
        compose: 'row',
        dataType: dataType ? dataType : _this.$store.getters.getComptDataType('blurChange')
      })
    }

    return {
      id: widget.id,
      template: [
        '<div>',
        '<div class="cell_cont" v-show="isShow && hasAuthority">',
        '<span :class="{cell_text: value, cell_nodata: !value}">{{valShow}}</span>',
        '</div>',
        '<div style="display:none;">{{relateFieldValueStatus}}{{buttonFieldValue}}{{ocrFieldValue}}</div>',
        '<event-trigger :widget="widget" :compose="\'row\'" @trigger-loading-event="triggerLoadingEvent" @trigger-value-event="triggerValueEvent" @trigger-get-value-event="triggerGetValueEvent"></event-trigger>',
        '<field-link-trigger :widget="widget" @set-loading-status="triggerLoadingEvent" @set-field-value="linkFieldValueStatus"></field-link-trigger>',
        '<detail-combox-field-link-trigger :widget="widget" @set-loading-status="triggerLoadingEvent" @set-field-value="detailComboxLinkFieldValueStatus"></detail-combox-field-link-trigger>',
        '<field-formula-trigger :widget="widget" @set-loading-status="triggerLoadingEvent" @set-formula-field-value="formulaFieldValueStatus"></field-formula-trigger>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget,
          value: '',
          errorInfo: {
            show: false,
            errMsg: ''
          },
          loadStatus: false,
          watchValue: '',//用于外部参数赋值时触发数据联动（目前为：第三方传入及按钮组件）
          inputFocusStatus: false //百分比显示时单行输入获得焦点的状态
        }
      },
      methods: {
        $reloadValueFun: function (vueObj) {
          //子表单横排时打开某行子组件后依次给对应子表彰表格显示字段赋值
          this.value = vueObj.value
          return this.verified
        },
        triggerLoadingEvent: function (isLoading) {
          this.loadStatus = isLoading
        },
        triggerValueEvent: function (val) {
          this.value = val
          this.loadStatus = false
        },
        triggerGetValueEvent:function (callback) {
          callback([{val: this.value}])
        },
        onBlur: function () {
          if (this.readonly) {
            return
          }
          
          if (this.errorInfo.errMsg) {
            this.errorInfo.show = true
            return
          }
        },
        linkFieldValueStatus: function (result) {
          var arr = this.$store.getters.getLinkResultFieldCondArrByFieldId(this.widget.config.id), hasNullCondVal
          for (var i = 0; i < arr.length; i++) {
            var ele = arr[i]
            if (!ele.val) {
              hasNullCondVal = true
              break
            }
          }
  
          if (hasNullCondVal && !this.isInit) {
            this.value = ''
            publicUtils.doShowErrorMsgFun(this, false, true)
            dataLoadInit(this)
            this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 1, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
            return
          }

          if (result && result.length > 0 && (!this.isPreview || !this.isInit)) {
            this.value = result[0].val !== '' ? parseFloat(result[0].val) : ''
            publicUtils.doShowErrorMsgFun(this, false, true)
            dataLoadInit(this)
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 1, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
        },
        detailComboxLinkFieldValueStatus: function (result) {
          this.loadStatus = false
          if (result && result.length > 0 && (!this.isPreview || !this.isInit)) {
            this.value = result[0].val
            publicUtils.doShowErrorMsgFun(this, false, true)
            dataLoadInit(this)
          }
        },
        formulaFieldValueStatus: function (data) {
          this.loadStatus = false
          var refreshResult = data.result, formulaFieldType = data.type, formulaFieldCurrIndex = data.index
          if (formulaFieldType === 0 && formulaFieldCurrIndex !== this.widget.config.inDetailGroupIndex && this.$store.state.formulaFieldCurrIndex > -1 && this.widget.config.inDetailGroupIndex > -1) {
            this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 2, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
            return
          }
          var key = (formulaFieldType > 0 && this.widget.pid > 0) ? this.widget.config.id + '_' + this.widget.config.inDetailGroupIndex : this.widget.config.id
          var result = refreshResult[key]
          if (result && result.length > 0 && (!this.isPreview || !this.isInit)) {
            var rval = parseFloat(result[0].val)
            this.value = (!rval && rval !== 0) ? '' : rval
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 2, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
        }
      },
      components: {
        'eventTrigger': VueUtils.loadComponent('static/js/src/front/forms/apps/web/fore/compts/config/component/eventTrigger.vue'),
        fieldLinkTrigger: VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldLink/fieldLinkTrigger.vue'),
        fieldFormulaTrigger: VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldFormula/fieldFormulaTrigger.vue'),
        'detailComboxFieldLinkTrigger': VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldLink/detailcombox/detailComboxFieldLinkTrigger.vue'),
      },
      watch: {
        value: function () {
          //百分比数值处理为真值
          var value = publicUtils.percentConvertToNumValue(this, this.value)
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: [{val: value}]}
            ],
            errMsg: this.errorInfo.errMsg,
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          })
        },
        watchValue: function () {
          publicUtils.doShowErrorMsgFun(this, false, true)
          dataLoadInit(this)
        }
      },
      computed: {
        valShow: function () {
          return this.value === ''? '': (this.value + (this.percentage ? ' %' : ''))
        },
        title: function () {
          return this.widget.config.fields[0].label
        },
        min: function () {
          return this.widget.config.fields[0].verify.minValue.range
        },
        max: function () {
          return this.widget.config.fields[0].verify.maxValue.range
        },
        required: function () {
          return this.widget.config.fields[0].verify.required
        },
        isInteger: function () {
          return this.widget.config.fields[0].verify.realNumber.isInteger
        },
        precision: function () {
          return this.widget.config.fields[0].verify.realNumber.precision
        },
        precisionType: function () {// 小数位数限定类型 0 固定 1 不超过
          return this.widget.config.fields[0].verify.realNumber.precisionType || 0;
        },
        verified: function () {
          if (!this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          var verified = true
          if (publicUtils.getVerifyInfo(this, this.value) !== '') {
            verified = false
          }
          if (this.required && this.value === '') {
            verified = false
          }
          return verified
        },
        errorTip: function () {
          var status = false
          if (this.$store.state.verifieds[this.widget.id] && this.$store.state.verifieds[this.widget.id].errorTip) {
            this.errorInfo.show = true
            status = true
          }
          return status
        },
        isPreview: function () {
          return this.$store.getters.getPreviewStatus
        },
        isInit: function () {
          return this.$store.getters.getInitStatus
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherReadOnlyStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          if (this.$store.getters.getCurrentType) {
            return this.$store.getters.getReadonlyStatus
          }
          var readonlyStatus
          var compt = this.$store.getters.getReadonlyOfComts[this.widget.id]
          if (compt) {
            readonlyStatus = true
          } else {
            readonlyStatus = !this.editable && !this.hasRoleId
          }
          return this.$store.getters.getReadonlyStatus || readonlyStatus
        },
        relateFieldValueStatus: function () {
          var resultFields = this.$store.getters.getRelateFieldValue
          var obj = resultFields[this.widget.config.id]
          if (obj && obj.id === this.widget.config.id && obj.hasOwnProperty('fields') && ((obj.hasOwnProperty('inDetailIndex') && obj.inDetailIndex === this.widget.config.inDetailGroupIndex) || !obj.hasOwnProperty('inDetailIndex')) && (!this.isPreview || !this.isInit)) {
            this.value = obj.fields[0].values && obj.fields[0].values.length > 0 && obj.fields[0].values[0].val !== '' ? parseFloat(obj.fields[0].values[0].val) : ''
            delete resultFields[this.widget.config.id]
          }
          if (this.isClearRelatedData && obj && obj.id === this.widget.config.id) {
            this.value = ''
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 3, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 6, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          return this.$store.getters.getRelateFieldValueStatus
        },
        isClearRelatedData: function () {
          return this.$store.getters.getIsClearRelatedData
        },
        visible: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('visible')) {
            this.widget.config.fields[0].visible = true
          }
          return this.widget.config.fields[0].visible
        },
        editable: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('editable')) {
            this.widget.config.fields[0].editable = true
          }
          return this.widget.config.fields[0].editable
        },
        hasAuthority: function () {
          var showStatus = false
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }
          
          if (!this.visible && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类似web端的fromManage
        },
        isShow: function () {
          var showStatus = this.$store.state.reloadValSubField
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            if (this.widget.pid > 0 && !this.$store.state.verifieds[this.widget.pid].isShow) {
              //明细内子组件时 如果明细组件是隐藏状态时 当前子组件也要改成隐藏状态
              showStatus = false
            } else {
              showStatus = true
            }
          } else if (!!this.widget.config.fromDetail
              && this.widget.config.inDetailGroupIndex > -1
              && this.$store.state.currOptionSel.inDetailGroupIndex !== this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow
            }
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id]
          }
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: [{val: $.trim(this.value)}]}
            ],
            errMsg: this.errorInfo.errMsg,
            verified: this.verified,
            isShow: showStatus,
            configId: this.widget.config.id,
            hasAuthority: this.hasAuthority
          })
          return showStatus
        },
        placeHolder: function () {
          return this.widget.config.fields[0].placeholderMsg
        },
        buttonFieldValue: function () {
          var fieldValue = this.$store.getters.getButtonFieldValue(this.widget.config.alias)
          if (fieldValue) {
            this.watchValue = fieldValue
            this.value = fieldValue.val[0] || ''
          }
          return fieldValue
        },
        ocrFieldValue: function () {
          var fieldValue = this.$store.getters.getOcrFieldValue(this.widget.config.inDetailGroupIndex + '_' + this.widget.config.alias)
          if (fieldValue) {
            this.watchValue = fieldValue
            this.value = fieldValue.val[0] || ''
          }
          return fieldValue
        },
        percentage: function () {
          return this.widget.config.fields[0].percentage
        },
        precisionLen: function () {
          return this.widget.config.fields[0].verify.realNumber.precisionLen
        }
      },
      mounted: function () {
        var _this = this
        //防止子组件中构造各组件实例未执行，导致默认值数据关联失效问题
        _this.$nextTick(function () {
          setTimeout(function () {
            if (_this.value || _this.value === 0) {
              publicUtils.doShowErrorMsgFun(_this, false, true)
            }
            dataLoadInit(_this, _this.$store.getters.getComptDataType('init'))
          }, 500)
        })
      },
      created: function () {
        var values = this.widget.config.fields[0].values
        this.value = values ? (values[0] && values[0].val) || '' : ''
        if (this.widget.config.fields[0].hasOwnProperty('unchangeable')) {
          this.widget.config.fields[0].editable = !this.widget.config.fields[0].unchangeable
          delete this.widget.config.fields[0].unchangeable
        }
        var rev = this.$store.getters.getRelevance
        if (rev != null && rev.hasOwnProperty(this.widget.config.id) && rev[this.widget.config.id]) {
          this.value = rev[this.widget.config.id]
        }
      }
    }
  }
})