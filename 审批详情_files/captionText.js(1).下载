define(['tipFiles', 'util'], function (tipFiles, util) {
  'use strict'
  return function (widget) {

    var tipInfoFrame = {
      id: widget.id,
      template: [
        '<div @click.stop="">',
        '<div class="sub_mask" v-show="typeShow"></div>',
        '<div class="temp_pop ckeditor_detail_pop" v-show="typeShow">',
        '<div class="temp_pop_mask">',
        '<div class="temp_pop_data">',
        '<div class="temp_pop_top">',
        '<span class="temp_pop_title">说明文字</span>',
        '</div>',
        '<div class="temp_pop_cont">',
        '<div class="ckeditor_data">',
        '<tip-files :id="widget.id" :tip-text="tipTextData" :tip-file-arr="tipImgsData" ></tip-files>',
        '</div>',
        '</div>',
        '<div class="temp_pop_bottom">',
        '<span class="temp_pop_close" @click.stop="typeShow = false">关闭</span>',
        '</div>',
        '</div>',
        '</div>',
        '</div>',
        '</div>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          typeShow: false
        }
      },
      props: ['widget'],
      components: {
        'tip-files': tipFiles
      },
      methods: {},
      computed: {
        tipTextData: function () {
          if (!(this.widget.config.fields[0].tip instanceof Object)) {
            return this.widget.config.fields[0].tip
          }
          return this.widget.config.fields[0].tip.text
        },
        tipImgsData: function () {
          if (!(this.widget.config.fields[0].tip instanceof Object)) {
            return []
          }
          return this.widget.config.fields[0].tip.imgs
        }
      },
      created: function () {}
    }

    return {
      id: widget.id,
      template: [
        '<div>',
        '<div class="cell_cont" v-show="isShow && hasAuthority">',
          '<span  class="cell_touch" @click.stop="doShowTipInfo" v-if="tipTextData&&tipImgsData.length>0">查看</span>',
          '<span class="cell_nodata" v-else></span>',
        '</div>',
        '<tip-info-frame ref="myOptions" :widget="widget"></tip-info-frame>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget
        }
      },
      components: {
        tipInfoFrame: tipInfoFrame
      },
      methods: {
        doShowTipInfo: function () {
          this.$refs.myOptions.typeShow = !this.$refs.myOptions.typeShow
        }
      },
      computed: {
        title: function () {
          return this.widget.config.fields[0].label
        },
        tipTextData: function () {
          if (!(this.widget.config.fields[0].tip instanceof Object)) {
            return this.widget.config.fields[0].tip
          }
          return this.widget.config.fields[0].tip.text
        },
        tipImgsData: function () {
          if (!(this.widget.config.fields[0].tip instanceof Object)) {
            return []
          }
          return this.widget.config.fields[0].tip.imgs
        },
        visible: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('visible')) {
            this.widget.config.fields[0].visible = true
          }
          return this.widget.config.fields[0].visible
        },
        editable: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('editable')) {
            this.widget.config.fields[0].editable = false
          }
          return this.widget.config.fields[0].editable
        },
        fromManage: function () {
          return this.$store.getters.getFromManageStatus
        },
        hasAuthority: function () {
          var showStatus = false
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }

          if (!this.visible && !this.fromManage && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId //是否有roleId，有roleId则按后台字段权限设置，类似web端的fromManage
        },
        isShow: function () {
          var showStatus = false
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            showStatus = true
          } else if (!!this.widget.config.fromDetail && this.$store.state.currOptionSel.inDetailGroupIndex !== this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow
            }
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id]
          }
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [],
            verified: true,
            isShow: showStatus
          })
          return showStatus
        }
      }
    }
  }
})