define(['jquery', 'VueUtils', 'tipImgs', 'publicUtils', 'popup'], function ($, VueUtils, tipImgs, publicUtils, popup) {
  'use strict'
  return function (widget) {
  
    /**
     * 设置数据优先级，前端事件，优先级大于默认值（自定义默认值、数据联动、公式编辑、常用公式，...）
     */
    function dataLoadInit(_this, dataType) {
      doReloadRelationValueConfigFun(_this)
      _this.$store.dispatch('dataLoadInit', {
        widget: _this.widget,
        value: $.trim(_this.value),
        compose: 'col',
        dataType: dataType ? dataType : _this.$store.getters.getComptDataType('blurChange')
      })
    }

    /**
     *触发第三方设置Url
     */
    function doInsertUrlField(_this) {
      var insertUrlFields = _this.$store.getters.getInsertFiledIdById(_this.widget.config.id)
      if (insertUrlFields && insertUrlFields.length > 0) {
        var valArr = []
        for (var i = 0; i < _this.value.length; i++) {
          valArr.push(_this.value[i].val)
        }
        //存在当前字段被做为第三方Url条件字段
        _this.$store.commit('operateInsertFiledData', {
          id: _this.widget.id,
          compt: _this.widget.config.compt,
          configId: _this.widget.config.id,
          value: valArr.join(',')
        })
      }
    }
    
    function getRegExp(_this) {
      var regexp = ''
      switch (_this.formatType) {
        case '':
          break
        case 'email':
          regexp = /^([a-zA-Z0-9_.-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-9_-]{2,4}){1,4})$/
          _this.formatName = '邮箱'
          break
        case 'mobile':
          regexp = /^1[3456789]\d{9}$/
          _this.formatName = '手机号码'
          break
        case 'postcode':
          regexp = /^[0-9]{6}$/
          _this.formatName = '邮政编码'
          break
        case 'idCard':
          regexp = /(^[1-9]\d{5}(18|19|20)\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}$)/
          _this.formatName = '身份证号码'
          break
        case 'customRegType':
          if (_this.regularExpress) {
            regexp = new RegExp(_this.regularExpress)
            _this.formatName = _this.regularErrMsg
          }
          break
      }
      return regexp
    }
    
    function doReloadRelationValueConfigFun(_this) {
      var configs = _this.$store.getters.getConcatBelongerRelationValueConfig
      for (var key in configs) {
        var keys = key.split('_')
        if (_this.widget.config.id === configs[key].condFieldId && (keys.length === 1 || (keys.length === 2 && parseInt(keys[1]) === publicUtils.getCurrentDetailIndex(_this)))) {
          configs[key]['condFieldValue'] = _this.value
          configs[key]['active'] = true
          _this.$store.commit('setConcatBelongerRelationValueConfig', {id: key, config: configs[key]})
          _this.$store.commit('setConcatBelongerRelationValueConfigStatus')
        }
      }
    }
    
    return {
      id: widget.id,
      template: [
        '<div :class="{noClick:readonly || !codeChangeable, widget_error: errorTip || (errorInfo.show&&errorInfo.verifyMsg)}" v-show="isShow && hasAuthority">',
        '<div style="display: none;">{{isHaveUniqueError}}{{relateFieldValueStatus}}{{buttonFieldValue}}{{ocrFieldValue}}</div>',
        '<!--标题-->',
          '<div class="form_widget_title">',
            '<h2 class="widget_name"><em class="option-star" v-if="required"></em>{{title}}</h2>',
          '</div>',
         '<!--标题描述-->',
          '<tip-imgs :tip-text="tipTextData" :tip-img-arr="tipImgsData" ></tip-imgs>',
          '<!--填写区域-->',
          '<div class="form_widget_data">',
            '<!--禁止编辑-->',
            '<div class="form_forbid_edit" :class="{form_forbid_nodata: !value}" v-if="readonly">',
              '<p class="form_forbid_word" v-html="showValue||\'暂无数据\'"  @click="openValue($event)"></p>',
            '</div>',
            '<!--可编辑-->',
            '<div class="form_widget_cont" v-if="!readonly">',
              '<div class="sub_loading" v-show="loadStatus"><span class="loading_icon"></span></div>',
              '<input type="text" class="temp_text_input field" :class="{error: errorInfo.show&&errorInfo.verifyMsg}" v-model="value" :readonly="readonly || (sweepCode && !codeChangeable)" ' +
              '@blur="checkLinkValue" @change="changeValue" placeholder="请输入" :placeholder="placeholder" @input="openOption">',
              '<div class="edit_input_tip">',
                '<span class="charlen_tip" v-if="charLimit && charLimit.open && charLimitType!==2">{{value.length}}/{{charLimit.maxSize}}</span>',
                '<span class="scan_btn" v-if="sweepCode && !readonly" @click.stop="doSweepCode"></span>',
              '</div>',
              '<lenovo-input :widget="widget" :ref="\'lenovoInput\' + widget.id" :value="value" @setvalue="setLenovoInputValue"></lenovo-input>',
            '</div>',
          '</div>',
          '<!--提示文本-->',
          '<div class="form_widget_prompt">',
            '<div class="widget_error_tip" v-show="errorInfo.show&&errorInfo.verifyMsg">',
            '<p class="must_word">{{errorInfo.verifyMsg}}</p>',
            '</div>',
            '<div class="widget_right_tip" style="display:none;">',
            '<p class="tip_word">壹壹壹壹</p>',
            '<p class="tip_word">1111.1</p>',
            '</div>',
          '</div>',
        '<event-trigger :widget="widget" :compose="\'col\'" @trigger-loading-event="triggerLoadingEvent" @trigger-value-event="triggerValueEvent" @trigger-get-value-event="triggerGetValueEvent"></event-trigger>',
        '<field-link-trigger :widget="widget" @set-loading-status="triggerLoadingEvent" @set-field-value="linkFieldValueStatus"></field-link-trigger>',
        '<field-formula-trigger :widget="widget" @set-loading-status="triggerLoadingEvent" @set-formula-field-value="formulaFieldValueStatus"></field-formula-trigger>',
        '<detail-combox-field-link-trigger :widget="widget" @set-loading-status="triggerLoadingEvent" @set-field-value="detailComboxLinkFieldValueStatus"></detail-combox-field-link-trigger>',
        '</div>'
      ].join(''),
      data: function () {
        return {
          widget: widget,
          value: '',
          formatName: '',
          errorInfo: {
            verifyMsg: '',
            show: false
          },
          loadStatus: false,
          charLimitType: 1, //限定字符范围类型（1最多输入，2最少输入，3范围）
          watchValue: ''//用于外部参数赋值时触发数据联动（目前为：第三方传入及按钮组件）
        }
      },
      methods: {
        doSweepCode: function () {
          var _this = this
          if (_this.readonly) {
            return
          }
          if (!publicUtils.isWeiXin()) {
            popup.alert('请使用微信进行扫码')
            return false
          }
          if (window.jweixin) {
            jweixin.scanQRCode({
              needResult: 1,
              desc: 'scanQRCode desc',
              success: function(res) {
                if (!res.resultStr) {
                  popup.alert('未获取信息')
                } else {
                  _this.value = res.resultStr
                  //一维码（条形码）在会结果前带上EAN_8, EAN_13, CODE_25, CODE_39, CODE_128, UPC_A, UPC_E
                  if (res.resultStr.startsWith('CODE_') || res.resultStr.startsWith('EAN_') || res.resultStr.startsWith('UPC_')) {
                    var resultArr = res.resultStr.split(',')
                    _this.value = resultArr[resultArr.length - 1]
                  }
                  _this.checkLinkValue()
                  setTimeout(function () {
                    _this.$store.dispatch('triggerEvent', {widget: _this.widget})
                  }, 300)
                }
              }
            })
          } else {
            popup.alert('初始化扫码失败，请刷新页面重试')
          }
        },
        triggerLoadingEvent: function (isLoading) {
          this.loadStatus = isLoading
        },
        triggerValueEvent: function (val) {
          this.value = val
          this.loadStatus = false
        },
        triggerGetValueEvent: function (callback) {
          callback([{val: this.value}])
        },
        checkLinkValue: function () {
          this.errorInfo.show = true
          dataLoadInit(this)
          doReloadRelationValueConfigFun(this)
          this.$refs['lenovoInput' + this.widget.id].stopSearch()
        },
        changeValue: function () {
          this.$store.commit('setInitStatus', false)
          doInsertUrlField(this)
        },
        openOption: function() {
          this.$refs['lenovoInput' + this.widget.id].unblur = true
          this.$refs['lenovoInput' + this.widget.id].getLenovoInput()
        },
        setLenovoInputValue: function (result) {
          this.value = result
        },
        linkFieldValueStatus: function (result) {
          this.loadStatus = false
          var arr = this.$store.getters.getLinkResultFieldCondArrByFieldId(this.widget.config.id), hasNullCondVal
          for (var i = 0; i < arr.length; i++) {
            var ele = arr[i]
            if (!ele.val) {
              hasNullCondVal = true
              break
            }
          }
          if (hasNullCondVal && !this.isInit) {
            this.value = ''
            dataLoadInit(this)
            this.$store.commit('removeCurrFormValueFieldVerify', {
              id: this.widget.config.id,
              type: 1,
              inDetailGroupIndex: this.widget.config.inDetailGroupIndex
            })
            return
          }

          if (result && result.length > 0 && !this.$store.getters.getReadonlyStatus && (!this.isPreview || !this.isInit)) {
            this.value = result[0].val
            dataLoadInit(this)
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {
            id: this.widget.config.id,
            type: 1,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex
          })
        },
        detailComboxLinkFieldValueStatus: function (result) {
          this.loadStatus = false
          if (result && result.length > 0 && (!this.isPreview || !this.isInit)) {
            this.value = result[0].val
            dataLoadInit(this)
          }
        },
        formulaFieldValueStatus: function (data) {
          this.loadStatus = false
          var refreshResult = data.result, formulaFieldType = data.type, formulaFieldCurrIndex = data.index
          if (formulaFieldType === 0 && formulaFieldCurrIndex !== this.widget.config.inDetailGroupIndex && this.$store.state.formulaFieldCurrIndex > -1 && this.widget.config.inDetailGroupIndex > -1) {
            this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 2, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
            return
          }
          var key = (formulaFieldType > 0 && this.widget.pid > 0) ? this.widget.config.id + '_' + this.widget.config.inDetailGroupIndex : this.widget.config.id
          var result = refreshResult[key]
          if (result && result.length > 0) {
            this.value = result[0].val
            if (formulaFieldType > 0) {
              delete refreshResult[key]
            }
            dataLoadInit(this)
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 2, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
        },
        openValue: function (e) {
          if($(e.target).is('a')){
            e.preventDefault()
            window.open(e.target.innerText)
          }
        }
      },
      components: {
        'tip-imgs': tipImgs,
        'lenovoInput': VueUtils.loadComponent('static/js/src/front/forms/apps/common/lenovoInput/lenovoInput.vue'),
        'eventTrigger': VueUtils.loadComponent('static/js/src/front/forms/apps/web/fore/compts/config/component/eventTrigger.vue'),
        fieldLinkTrigger: VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldLink/fieldLinkTrigger.vue'),
        fieldFormulaTrigger: VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldFormula/fieldFormulaTrigger.vue'),
        detailComboxFieldLinkTrigger: VueUtils.loadComponent('static/js/src/front/forms/apps/common/component/fieldLink/detailcombox/detailComboxFieldLinkTrigger.vue')
      },
      watch: {
        value: function () {
          if (!this.verified) {
            var regexp = getRegExp(this)
            if (regexp && (/^idCard|postcode|mobile|email$/.test(this.formatType))) {
              this.value = this.value.replace(/\s/g, '')
            }
            if (regexp && (!regexp.test(this.value) || (this.formatType === 'idCard' && !publicUtils.idCardCodeValid(this.value)))) {
              if (this.formatType === 'customRegType') {
                this.errorInfo.verifyMsg = this.regularErrMsg
              } else {
                this.errorInfo.verifyMsg = this.formatName + '格式不合法'
              }
            }
          }
          this.$store.commit('watchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: [{val: $.trim(this.value)}]}
            ],
            configId: this.widget.config.id,
            inDetailGroupIndex: this.widget.config.inDetailGroupIndex,
            verified: this.verified,
            errMsg: this.errorInfo.verifyMsg,
            isShow: this.isShow,
            hasAuthority: this.hasAuthority
          })
        },
        watchValue: function () {
          dataLoadInit(this)
        }
      },
      computed: {
        title: function () {
          return this.widget.config.fields[0].label
        },
        required: function () {
          return this.widget.config.fields[0].verify.required
        },
        verified: function () {
          var verified = true
          if (!this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          this.errorInfo.verifyMsg = ''
          this.errorInfo.show = false
          if ($.trim(this.value) !== '') {
            var regexp = getRegExp(this)
            if (regexp && (!regexp.test(this.value) || (this.formatType === 'idCard' && !publicUtils.idCardCodeValid(this.value)))) {
              verified = false
            }
          }
          if (this.required && $.trim(this.value) === '') {
            verified = false
            this.errorInfo.verifyMsg = '此项为必填项'
          }
          if (this.charLimitStatus) {
            verified = false
          }
          return verified
        },
        charLimitStatus: function () {
          if (!this.value || !this.charLimit || !this.charLimit.open) {
            return false
          }
          switch (this.charLimitType) {
            case 1:
              if ($.trim(this.value).length > parseInt(this.charLimit.maxSize)) {
                this.errorInfo.verifyMsg = '超过字符限制'
                return true
              }
              break
            case 2:
              if ($.trim(this.value).length < parseInt(this.charLimit.minSize)) {
                this.errorInfo.verifyMsg = '最少输入' + this.charLimit.minSize + '个字符'
                return true
              }
              break
            case 3:
              if ($.trim(this.value).length < parseInt(this.charLimit.minSize) || $.trim(this.value).length > parseInt(this.charLimit.maxSize)) {
                this.errorInfo.verifyMsg = '限定字符个数' + this.charLimit.minSize + '-' + this.charLimit.maxSize
                return true
              }
              break
            default:
              break
          }
          return false
        },
        charLimit: function () {
          var charLimit = this.widget.config.fields[0].verify.charLimit
          if (charLimit && charLimit.open && charLimit.size) {
            charLimit.maxSize = charLimit.size
            delete this.widget.config.fields[0].verify.charLimit.size
          }
          return charLimit
        },
        errorTip: function () {
          var status = false
          if (this.$store.state.verifieds[this.widget.id] && this.$store.state.verifieds[this.widget.id].errorTip) {
            this.errorInfo.show = true
            status = true
          }
          return status
        },
        isPreview: function () {
          return this.$store.getters.getPreviewStatus
        },
        isInit: function () {
          return this.$store.getters.getInitStatus
        },
        readonly: function () {
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !this.$store.getters.getFieldGatherReadOnlyStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldEditableStatus(this.widget.config.id, this.widget.config.compt)) {
            return true
          }
          var rev = this.$store.getters.getRelevance
          if (rev != null && rev.hasOwnProperty(this.widget.config.id)) {
            return true
          }
          if (this.$store.getters.getCurrentType) {
            return this.$store.getters.getReadonlyStatus
          }
          var readonlyStatus
          var compt = this.$store.getters.getReadonlyOfComts[this.widget.id]
          if (compt) {
            readonlyStatus = true
          } else {
            readonlyStatus = !this.editable && !this.hasRoleId
          }
          return this.$store.getters.getReadonlyStatus || readonlyStatus
        },
        relateFieldValueStatus: function () {
          var resultFields = this.$store.getters.getRelateFieldValue
          var obj = resultFields[this.widget.config.id]
          if (obj && obj.id === this.widget.config.id && obj.hasOwnProperty('fields') && ((obj.hasOwnProperty('inDetailIndex') && obj.inDetailIndex === publicUtils.getCurrentDetailIndex(this)) || !obj.hasOwnProperty('inDetailIndex')) && !this.$store.getters.getReadonlyStatus && (!this.isPreview || !this.isInit)) {
            var oldValue = this.value
            this.value = obj.fields[0].values && obj.fields[0].values.length > 0 && obj.fields[0].values[0].val !== '' ? obj.fields[0].values[0].val : ''
            if (this.isClearRelatedData) {
              this.value = ''
            }
            if (oldValue !== this.value) {
              dataLoadInit(this)
            }
            delete resultFields[this.widget.config.id]
          }
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 3, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          this.$store.commit('removeCurrFormValueFieldVerify', {id: this.widget.config.id, type: 6, inDetailGroupIndex: this.widget.config.inDetailGroupIndex})
          return this.$store.getters.getRelateFieldValueStatus
        },
        isClearRelatedData: function () {
          return this.$store.getters.getIsClearRelatedData
        },
        tipTextData: function () {
          if (!(this.widget.config.fields[0].tip instanceof Object)) {
            return this.widget.config.fields[0].tip
          }
          return this.widget.config.fields[0].tip.text
        },
        tipImgsData: function () {
          if (!(this.widget.config.fields[0].tip instanceof Object)) {
            return []
          }
          return this.widget.config.fields[0].tip.imgs
        },
        formatType: function () {
          return this.widget.config.fields[0].verify.format ? this.widget.config.fields[0].verify.format.type : ''
        },
        regularExpress: function () {
          if (!this.widget.config.fields[0].verify.regularExpress) {
            return ''
          }
          return this.widget.config.fields[0].verify.regularExpress.express || ''
        },
        regularErrMsg: function () {
          if (!this.widget.config.fields[0].verify.regularExpress) {
            return '格式错误!'
          }
          return this.widget.config.fields[0].verify.regularExpress.errorTip || '格式错误!'
        },
        visible: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('visible')) {
            this.widget.config.fields[0].visible = true
          }
          return this.widget.config.fields[0].visible
        },
        editable: function () {
          if (!this.widget.config.fields[0].hasOwnProperty('editable')) {
            this.widget.config.fields[0].editable = true
          }
          return this.widget.config.fields[0].editable
        },
        hasAuthority: function () {
          var showStatus = false
          var gatherMode = this.$store.getters.getGatherModel
          if (gatherMode) {
            return !!this.$store.getters.getFieldGatherShowStatusById(this.widget.config.id)
          }
          var approveModel = this.$store.getters.getApproveModel
          if (approveModel && !this.$store.getters.getApproveFieldShowStatus(this.widget.config.id, this.widget.config.compt)) {
            return showStatus
          }
          var permissionSetHideFields = this.$store.getters.getPermissionSetHideFields
          if (permissionSetHideFields && permissionSetHideFields.indexOf(this.widget.config.id) !== -1) {
            showStatus = false
            return showStatus
          }
          
          if (!this.visible && !this.hasRoleId) {
            return showStatus
          }
          return true
        },
        hasRoleId: function () {
          return this.$store.getters.getHasRoleId
        },
        isShow: function () {
          var showStatus = this.$store.state.reloadValSubField
          if (this.$store.state.foreverShow[this.widget.config.id]) {
            if (this.widget.pid > 0 && !this.$store.state.verifieds[this.widget.pid].isShow) {
              //明细内子组件时 如果明细组件是隐藏状态时 当前子组件也要改成隐藏状态
              showStatus = false
            } else {
              showStatus = true
            }
          } else if (!!this.widget.config.fromDetail
              && this.widget.config.inDetailGroupIndex > -1
              && this.$store.state.currOptionSel.inDetailGroupIndex !== this.widget.config.inDetailGroupIndex) {
            if (this.$store.state.currFieldShowStatus[this.widget.id]) {
              showStatus = !!this.$store.state.currFieldShowStatus[this.widget.id].isShow
            }
          } else {
            showStatus = !!this.$store.state.currOptionSel[this.widget.config.id]
          }
          this.$store.commit('isShowWatchValues', {
            id: this.widget.id,
            fvalues: [
              {fidx: 0, values: [{val: $.trim(this.value)}]}
            ],
            verified: this.verified,
            errMsg: this.errorInfo.verifyMsg,
            isShow: showStatus,
            hasAuthority: this.hasAuthority
          })
          return showStatus
        },
        isHaveUniqueError: function () {
          var status = false
          var compt = this.widget.config
          var unique = compt.fields[0].verify.unique
          var uniqueErrorFields = this.$store.getters.getUniqueErrorFields
          if (unique && unique.open && uniqueErrorFields.hasOwnProperty(compt.id + '-' + compt.inDetailGroupIndex)) {
            this.errorInfo.verifyMsg = unique.errMsg
            this.errorInfo.show = true
            status = true
          }
          if (unique && unique.open) {
            if (uniqueErrorFields.hasOwnProperty(compt.id + '-' + compt.inDetailGroupIndex) &&
                uniqueErrorFields[compt.id + '-' + compt.inDetailGroupIndex].hasOwnProperty('repeat') &&
                uniqueErrorFields[compt.id + '-' + compt.inDetailGroupIndex].repeat) {
              this.errorInfo.verifyMsg = '此项内容已重复，请重新填写'
            }
          }
          return status
        },
        buttonFieldValue: function () {
          var fieldValue = this.$store.getters.getButtonFieldValue(this.widget.config.alias)
          if (fieldValue) {
            this.watchValue = fieldValue
            this.value = fieldValue.val[0] || ''
          }
          return fieldValue
        },
        ocrFieldValue: function () {
          var fieldValue = this.$store.getters.getOcrFieldValue(this.widget.config.inDetailGroupIndex + '_' + this.widget.config.alias)
          if (fieldValue) {
            this.watchValue = fieldValue
            this.value = fieldValue.val[0] || ''
          }
          return fieldValue
        },
        showValue: function () {
          return publicUtils.showTextValue(this.value)
        },
        placeholder: function () {
          if (!this.charLimit || !this.charLimit.open) {
            return ''
          }
          if (this.charLimit.maxSize && (!this.charLimit.minSize || parseInt(this.charLimit.minSize) === 0)) {
            this.charLimitType = 1
            return ''
          }
          if (this.charLimit.minSize && !this.charLimit.maxSize) {
            this.charLimitType = 2
            return '最少输入' + this.charLimit.minSize + '个字符'
          }
          if (this.charLimit.minSize && this.charLimit.maxSize) {
            this.charLimitType = 3
            return '限定字符个数' + this.charLimit.minSize + '-' + this.charLimit.maxSize
          }
          return ''
        },
        sweepCode: function () {
          if (!this.widget.config.fields[0].sweepCode) {
            return false
          } else {
            return this.widget.config.fields[0].sweepCode
          }
        },
        codeChangeable: function () {
          if (!this.widget.config.fields[0].codeChangeable) {
            return false
          } else {
            return this.widget.config.fields[0].codeChangeable
          }
        }
      },
      mounted: function () {
        var _this = this
        //防止子组件中构造各组件实例未执行，导致默认值数据关联失效问题
        _this.$nextTick(function () {
          setTimeout(function () {
            dataLoadInit(_this, _this.$store.getters.getComptDataType('init'))
          }, 500)
        })
      },
      created: function () {
        var values = this.widget.config.fields[0].values
        this.value = values ? (values[0] && values[0].val) || '' : ''
        if (this.widget.config.fields[0].hasOwnProperty('unchangeable')) {
          this.widget.config.fields[0].editable = !this.widget.config.fields[0].unchangeable
          delete this.widget.config.fields[0].unchangeable
        }
        
        var rev = this.$store.getters.getRelevance
        if (rev != null && rev.hasOwnProperty(this.widget.config.id) && rev[this.widget.config.id]) {
          this.value = rev[this.widget.config.id]
        }
      }
    }
  }
})